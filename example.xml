<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="749" skipped="0" tests="928" time="2.281" timestamp="2023-05-25T14:16:20.420350" hostname="examplehost"><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareRunCommandPowerShellScript.yaml]" time="0.005" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareOperations.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareOperations.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT-AADHybridHealthADFSNewServer.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT-AADHybridHealthADFSNewServer.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creation_of_Expensive_Computes_in_Azure.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creation_of_Expensive_Computes_in_Azure.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creating_Anomalous_Number_Of_Resources_detection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creating_Anomalous_Number_Of_Resources_detection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NewResourceGroupsDeployedTo.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NewResourceGroupsDeployedTo.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSServiceDelete.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSServiceDelete.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT_Creation_of_Expensive_Computes_in_Azure.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT_Creation_of_Expensive_Computes_in_Azure.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSNewServer.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSNewServer.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSSuspApp.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSSuspApp.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Granting_Permissions_To_Account_detection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Granting_Permissions_To_Account_detection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/New-CloudShell-User.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/New-CloudShell-User.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AzDiagSettingsDeleted.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureActivity/TimeSeriesAnomaly_Mass_Cloud_Resource_Deletions.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/TimeSeriesAnomaly_Mass_Cloud_Resource_Deletions.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Failure.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Infected_Files_Found.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninBruteForce-AzurePortal.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninBruteForce-AzurePortal.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/FailedLogonToAzurePortal.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/FailedLogonToAzurePortal.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/BypassCondAccessRule.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/BypassCondAccessRule.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninPasswordSpray.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninPasswordSpray.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/DistribPassCrackAttempt.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/DistribPassCrackAttempt.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/NRT_MFARejectedbyUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/NRT_MFARejectedbyUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/PrivilegedUserLogonfromnewASN.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninAttemptsByIPviaDisabledAccounts.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninAttemptsByIPviaDisabledAccounts.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzureAADPowerShellAnomaly.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzureAADPowerShellAnomaly.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationAttemptfromNewCountry.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ServicePrincipalAuthenticationAttemptfromNewCountry.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/BruteForceCloudPC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/BruteForceCloudPC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomalousUserAppSigninLocationIncrease-detection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomalousUserAppSigninLocationIncrease-detection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SuccessThenFail_DiffIP_SameUserandApp.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SuccessThenFail_DiffIP_SameUserandApp.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/MFARejectedbyUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/MFARejectedbyUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ExplicitMFADeny.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/ExplicitMFADeny.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationsofPrivilegedAccountsOutsideofExpectedControls.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/UserAccounts-CABlockedSigninSpikes.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/UserAccounts-CABlockedSigninSpikes.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ADFSSignInLogsPasswordSpray.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/ADFSSignInLogsPasswordSpray.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomolousSingleFactorSignin.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SeamlessSSOPasswordSpray.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SeamlessSSOPasswordSpray.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzurePortalSigninfromanotherAzureTenant.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzurePortalSigninfromanotherAzureTenant.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SigninLogs/DisabledAccountSigninsAcrossManyApplications.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/DisabledAccountSigninsAcrossManyApplications.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureSQL.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureSQL.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AWSCloudTrail.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AWSCloudTrail.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_CustomSecurityLog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_CustomSecurityLog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityAlert.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityAlert.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityEvent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityEvent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_AuditLogs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_AuditLogs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_W3CIISLog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_W3CIISLog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_OfficeActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_OfficeActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_SecurityAlerts.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_SecurityAlerts.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SigninLogs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SigninLogs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_DnsEvents.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_DnsEvents.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_VMConnection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_VMConnection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_AzureActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_AzureActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_CommonSecurityLog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_CommonSecurityLog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_CommonSecurityLog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_CommonSecurityLog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_Syslog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_Syslog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_DnsEvents.yaml]" time="0.000"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_DnsEvents.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureKeyVault.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureKeyVault.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_SecurityEvent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_SecurityEvent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_PaloAlto.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_PaloAlto.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureFirewall.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureFirewall.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_imWebSession.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_imWebSession.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureNetworkAnalytics.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureNetworkAnalytics.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AppServiceHTTPLogs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AppServiceHTTPLogs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_Syslog.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_Syslog.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_SecurityAlert.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_SecurityAlert.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_OfficeActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_OfficeActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_PaloAlto.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_PaloAlto.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPentity_SigninLogs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPentity_SigninLogs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_PaloAlto.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_PaloAlto.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_OfficeActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_OfficeActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_imWebSession.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_imWebSession.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ClearStopChangeTrailLogs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ClearStopChangeTrailLogs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToRDSDatabase.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToRDSDatabase.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_FullAdminPolicyAttachedToRolesUsersGroups.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_FullAdminPolicyAttachedToRolesUsersGroups.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/SuspiciousAccessOfBECRelatedDocumentsInAWSS3Buckets.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/NRT_AWS_ConsoleLogonWithoutMFA.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/NRT_AWS_ConsoleLogonWithoutMFA.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToVPC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToVPC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_IngressEgressSecurityGroupChange.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_IngressEgressSecurityGroupChange.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ConsoleLogonWithoutMFA.yaml]" time="0.000"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ConsoleLogonWithoutMFA.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_LoadBalancerSecGroupChange.yaml]" time="0.000"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_LoadBalancerSecGroupChange.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_CredentialHijack.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_CredentialHijack.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_ExcessiveNXDOMAINDNSQueries.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_HighNXDomainCount_detection.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_TorProxies.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_Miners.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_IPEntity_DnsEvents.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_IPEntity_DnsEvents.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_DomainEntity_DnsEvents.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_DomainEntity_DnsEvents.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByUser.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighPortCountByClientIP.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByClientIP.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/AnomomlousUserAgentConnection.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/SilkTyphoonSuspiciousExchangeRequestPattern.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/Supernovawebshell.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/ProxyShellPwn2Own.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/MaliciousAlertLinkedWebRequests.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Syslog/ssh_potentialBruteForce.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/ssh_potentialBruteForce.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Syslog/squid_cryptomining_pools.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/squid_cryptomining_pools.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Syslog/FailedLogonAttempts_UnknownUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/FailedLogonAttempts_UnknownUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Syslog/squid_tor_proxies.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/squid_tor_proxies.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Syslog/NRT_squid_events_for_mining_pools.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/NRT_squid_events_for_mining_pools.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODHighRiskNotDiscarded.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODHighRiskNotDiscarded.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODBinaryInAttachment.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODBinaryInAttachment.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderInTIList.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderInTIList.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderIPinTIList.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderIPinTIList.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODDataExfiltrationToPrivateEmail.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODDataExfiltrationToPrivateEmail.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleArchivedAttachmentsToSameRecipient.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleArchivedAttachmentsToSameRecipient.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODSuspiciousAttachment.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODSuspiciousAttachment.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODWeakCiphers.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODWeakCiphers.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleProtectedEmailsToUnknownRecipient.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleProtectedEmailsToUnknownRecipient.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleLargeEmailsToSameRecipient.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleLargeEmailsToSameRecipient.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADORetentionReduced.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADORetentionReduced.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADONewExtensionAdded.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADONewExtensionAdded.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricPrPolicyBypassing.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricPrPolicyBypassing.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NRT_ADOAuditStreamDisabled.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NRT_ADOAuditStreamDisabled.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOServiceConnectionUsage.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOServiceConnectionUsage.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPipelineCreatedDeletedOneDay.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPipelineCreatedDeletedOneDay.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAuditStreamDisabled.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAuditStreamDisabled.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPipelineModifiedbyNewUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPipelineModifiedbyNewUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPATUsedWithBrowser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPATUsedWithBrowser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOSecretNotSecured.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOSecretNotSecured.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAgentPoolCreatedDeleted.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAgentPoolCreatedDeleted.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOVariableModifiedByNewUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOVariableModifiedByNewUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewAgentAddedToPoolbyNewUserorofNewOS.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewAgentAddedToPoolbyNewUserorofNewOS.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewPAPCAPCASaddedtoADO.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewPAPCAPCASaddedtoADO.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ExternalUpstreamSourceAddedtoAzureDevOpsFeed.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ExternalUpstreamSourceAddedtoAzureDevOpsFeed.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPatSessionMisuse.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPatSessionMisuse.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricServiceConnectionAdds.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricServiceConnectionAdds.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOAdminGroupAdditions.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOAdminGroupAdditions.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/SuspiciousAccessOfBECRelatedDocuments.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/imFileESolarWindsSunburstSupernova.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureFirewall/SeveralDenyActionsRegistered.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureFirewall/SeveralDenyActionsRegistered.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/SilkTyphoonSuspiciousFileDownloads.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/ExchagngeSuspiciousFileDownloads.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/WindowsEvents/ChiaCryptoMining_WindowsEvent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/WindowsEvents/ChiaCryptoMining_WindowsEvent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/WindowsEvents/CaramelTsunami_IOC_WindowsEvent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/WindowsEvents/CaramelTsunami_IOC_WindowsEvent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AWSGuardDuty/AWS_GuardDuty_template.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AWSGuardDuty/AWS_GuardDuty_template.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewOfficeUserAgentinDynamics.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsAdminActivity.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsUserAgent.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/DynamicsEncryptionSettingsChanged.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/MassExportOfDynamicstoExcel.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/UserBulkRetreivalOutsideNormalActivity.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Anomalies/UnusualAnomaly.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Anomalies/SignInAnomaly.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/ExcessiveHTTPFailuresFromSource.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/ExcessiveHTTPFailuresFromSource.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PossibleBeaconingActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PossibleBeaconingActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/IPEntity_imNetworkSession.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/IPEntity_imNetworkSession.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PortScan.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PortScan.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/LAQueryLogs/UserSearchingForVIPUserActivity.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_IOCsMay2021.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_IOCsMay2021.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270RegistryIOCSep2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270RegistryIOCSep2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialMercury_Webshell.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SigninFirewallCorrelation.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SeashellBlizzardIOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SeashellBlizzardIOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmailAccessviaActiveSync.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetOct292020IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetOct292020IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumDomainIOC112020.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumDomainIOC112020.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MultiplePasswordresetsbyUser.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RubySleetOct292020IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RubySleetOct292020IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SilkTyphoonUmServiceSuspiciousFile.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SilkTyphoonUmServiceSuspiciousFile.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64IPInURLFromMDE.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270PowershellSep2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270PowershellSep2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialFodhelperUACBypass(ASIMVersion).yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ChiaCryptoMining.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ChiaCryptoMining.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RunCommandUEBABreach.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialBuildProcessCompromiseMDE.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialBuildProcessCompromiseMDE.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_IP_Domain_Hash_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_IP_Domain_Hash_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumIPIOC112020.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumIPIOC112020.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MalformedUserAgents.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTHashes.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTHashes.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HostAADCorrelation.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardJuly2019IOCs.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-VM-Network.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-VM-Network.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuditPolicyManipulation_using_auditpol.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AquaBlizzardFeb2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AquaBlizzardFeb2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/KnownMintSandstormDomainsIP-October2020.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/KnownMintSandstormDomainsIP-October2020.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrivilegedAccountsSigninFailureSpikes.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrivilegedAccountsSigninFailureSpikes.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuthenticationMethodsChangedforPrivilegedAccount.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuthenticationMethodsChangedforPrivilegedAccount.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_FoggyWeb.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_FoggyWeb.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/powershell_MangoSandstorm.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AdditionalFilesUploadedByActor.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AdditionalFilesUploadedByActor.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PlaidRainIPIoC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PlaidRainIPIoC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NetworkEndpointCorrelation.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NetworkEndpointCorrelation.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MSHTMLVuln.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MSHTMLVuln.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UnusualGuestActivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UnusualGuestActivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0228FilePathHashesNovember2021.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MailBoxTampering.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AAD_PAVPN_Correlation.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ADFS-DKM-MasterKey-Export.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-Network-Beacon.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-Network-Beacon.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270NewUserSep2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270NewUserSep2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EUROPIUM _September2022.yaml]" time="0.004" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NylonTyphoonIOCsNov2021.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NylonTyphoonIOCsNov2021.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_July2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_July2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AWSConsoleAADCorrelation.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_FileExtRename.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Log4J_IPIOC_Dec112021.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Log4J_IPIOC_Dec112021.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NewUserAgentLast24h.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NewUserAgentLast24h.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/WSLMalwareCorrelation.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/WSLMalwareCorrelation.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AnomalousIPUsageFollowedByTeamsAction.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiFileHashesJuly2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiFileHashesJuly2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADHostLoginCorrelation.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousLoginfromDeletedExternalIdentities.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_AVHits_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_AVHits_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiC2DomainsJuly2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiC2DomainsJuly2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Mercury_Log4j_August2022.yaml]" time="0.005" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeServerVulnerabilitiesMarch2021IoCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeServerVulnerabilitiesMarch2021IoCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64UserInWebURIFromMDE.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CadetBlizzard_Jan2022_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CadetBlizzard_Jan2022_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrestigeRansomwareIOCsOct22.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_Filename_Commandline_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_Filename_Commandline_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270WMICDiscoverySep2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270WMICDiscoverySep2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/StarBlizzardDomainsAugust2022.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UserAgentSearch_log4j.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UserAgentSearch_log4j.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HiveRansomwareJuly2022.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HiveRansomwareJuly2022.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GraniteTyphoonIOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GraniteTyphoonIOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/COMRegistryKeyModifiedtoPointtoFileinColorDrivers.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Manganese_VPN-IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Manganese_VPN-IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DEV-0322_SolarWinds_Serv-U_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DEV-0322_SolarWinds_Serv-U_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CaramelTsunami_IOC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CaramelTsunami_IOC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TarraskHashIoC.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TarraskHashIoC.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MFADisable.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MFADisable.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PHOSPHORUSMarch2019IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PHOSPHORUSMarch2019IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GainCodeExecutionADFSviaWMI.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmeraldSleetIOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmeraldSleetIOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SecurityServiceRegistryACLModification.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_DomainIOCsMarch2021.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_DomainIOCsMarch2021.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetJan272021IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetJan272021IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiAVDetection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiAVDetection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTLogFile.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTLogFile.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADAWSConsoleCorrelation.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousModificationofGlobalAdminProperties.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TimeSeriesAnomaly-MultiVendor_DataExfiltration.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EuropiumUnusualIdentity.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeWorkerProcessMakingRemoteCall.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardOct292020IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardOct292020IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Accountcreatedfromnon-approvedsources.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PossibleDGAContacts.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/DiscordCDNRiskyFileDownload_ASim.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PotentiallyHarmfulFileTypes.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUACryptoMiners.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/ExcessiveNetworkFailuresFromSource.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAHackTool.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAPowershell.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppCertDLLModification.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppCertDLLModification.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthMonAgentRegKeyAccess.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/powershell_empire.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/powershell_empire.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingToolsFileArtifacts.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingToolsFileArtifacts.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/Potentialre-namedsdeleteusage.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/Potentialre-namedsdeleteusage.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialBuildProcessCompromise.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SolorigateNamedPipe.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/FakeComputerAccountCreated.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteAuthSyncConnection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteAuthSyncConnection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AccessibilityFeaturesModification.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LocalDeviceJoinInfoAndTransportKeyRegKeysAccess.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LocalDeviceJoinInfoAndTransportKeyRegKeysAccess.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MacroInvokingShellBrowserWindowCOMObjects.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MacroInvokingShellBrowserWindowCOMObjects.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_never_expires.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotenialResourceBasedConstrainedDelegationAbuse.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppInt_DLLsModification.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppInt_DLLsModification.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/malware_in_recyclebin.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/malware_in_recyclebin.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GroupCreatedAddedToPrivlegeGroup_1h.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_base64_encoded_pefile.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_base64_encoded_pefile.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialKerberoast.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialRemoteDesktopTunneling.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialRemoteDesktopTunneling.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DSRMAccountAbuse.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteHTTPNetworkConnection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteHTTPNetworkConnection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserCreatedAddedToBuiltinAdmins_1d.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSAbnormalEnhancedKeyUsageAttribute-OID.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthSvcAgentRegKeyAccess.yaml]" time="0.004" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountCreatedDeleted_10m.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonNewUMServiceChildProcess.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAddedToPrivlegeGroup_1h.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/base64_encoded_pefile.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/base64_encoded_pefile.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_not_set.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_not_set.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SdeletedeployedviaGPOandrunrecursively.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SdeletedeployedviaGPOandrunrecursively.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/gte_6_FailedLogons_10m.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_MultipleConnectionsFromSingleSystem.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/TimeSeriesAnomaly-ProcessExecutions.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/TimeSeriesAnomaly-ProcessExecutions.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesExecutedfromNon-DefaultDirectory.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesExecutedfromNon-DefaultDirectory.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonSuspiciousUMServiceError.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AdminSDHolder_Modifications.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousRundll32Exec.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_Nesting.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/execute_base64_decodedpayload.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/execute_base64_decodedpayload.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DumpingLSASSProcessIntoaFile.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DumpingLSASSProcessIntoaFile.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExchangeOABVirtualDirectoryAttributeContainingPotentialWebshell.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExchangeOABVirtualDirectoryAttributeContainingPotentialWebshell.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingServiceInstallation.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingServiceInstallation.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserPrincipalNameAssignedToUserAccount.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MultipleFailedFollowedBySuccess.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MultipleFailedFollowedBySuccess.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/COMEventSystemLoadingNewDLL.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesLolbinsRenamed.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesLolbinsRenamed.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSDBNamedPipeConnection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSDBNamedPipeConnection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LateralMovementViaDCOM.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LateralMovementViaDCOM.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousScriptRegistryWrite.yaml]" time="0.012" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_SecurityEventLogCleared.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_SecurityEventLogCleared.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAdd-Removed.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ScheduleTaskHide.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ScheduleTaskHide.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GainCodeExecutionADFSViaSMB.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GainCodeExecutionADFSViaSMB.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WDigestDowngradeAttack.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WDigestDowngradeAttack.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_execute_base64_decodedpayload.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_execute_base64_decodedpayload.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialFodhelperUACBypass.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialFodhelperUACBypass.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_RareConnection.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/StartStopHealthService.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/StartStopHealthService.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SecurityEventLogCleared.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SecurityEventLogCleared.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountEnabledDisabled_10m.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExcessiveLogonFailures.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExcessiveLogonFailures.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NonDCActiveDirectoryReplication.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NonDCActiveDirectoryReplication.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/QualysVMV2/HighNumberofVulnDetectedV2.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVMV2/HighNumberofVulnDetectedV2.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/QualysVMV2/NewHighSeverityVulnDetectedAcrossMulitpleHostsV2.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVMV2/NewHighSeverityVulnDetectedAcrossMulitpleHostsV2.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceEvents/SolarWinds_TEARDROP_Process-IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceEvents/SolarWinds_TEARDROP_Process-IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DnsEvents/NRT_DNS_Related_To_Mining_Pools.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/NRT_DNS_Related_To_Mining_Pools.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighNXDomainCount_detection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighNXDomainCount_detection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_Miners.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_Miners.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_TorProxies.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_TorProxies.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighReverseDNSCount_detection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighReverseDNSCount_detection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PrivlegedRoleAssignedOutsidePIM.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PrivlegedRoleAssignedOutsidePIM.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/End-userconsentstoppedduetorisk-basedconsent.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAddedtoAdminRole.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/RareApplicationConsent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/RareApplicationConsent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationIDURIChanged.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_PwnAuth.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_PwnAuth.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/URLAddedtoApplicationfromUnknownDomain.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdditionofaTemporaryAccessPasstoaPrivilegedAccount.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_UseraddedtoPrivilgedGroups.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_UseraddedtoPrivilgedGroups.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_AuthenticationMethodsChangedforVIPUsers.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_AuthenticationMethodsChangedforVIPUsers.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedAppRoleWithSensitiveAccess.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundDirectSettingsChanged.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundDirectSettingsChanged.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ConditionalAccessPolicyModifiedbyNewUser.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/FirstAppOrServicePrincipalCredential.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/FirstAppOrServicePrincipalCredential.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AuthenticationMethodChangedforPrivilegedAccount.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousLinkingofExternalIdtoExistingUsers.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationLogoutURL.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountElevatedtoNewRole.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdminPromoAfterRoleMgmtAppPermissionGrant.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdminPromoAfterRoleMgmtAppPermissionGrant.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationOwnership.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_O365AttackToolkit.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_O365AttackToolkit.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PIMElevationRequestRejected.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PIMElevationRequestRejected.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Useraccountcreatedwithoutexpectedattributesdefined.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/BulkChangestoPrivilegedAccountPermissions.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/BulkChangestoPrivilegedAccountPermissions.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationDeleted.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationDeleted.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedPrivilegedRole.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousServicePrincipalcreationactivity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousServicePrincipalcreationactivity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewAppOrServicePrincipalCredential.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewAppOrServicePrincipalCredential.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAccountCreatedUsingIncorrectNamingFormat.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewExtUserGrantedAdmin.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewExtUserGrantedAdmin.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MultipleAdmin_membership_removals_from_NewAdmin.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MultipleAdmin_membership_removals_from_NewAdmin.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedandDeletedinShortTimeframe.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedandDeletedinShortTimeframe.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/nrt_FirstAppOrServicePrincipalCredential.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/nrt_FirstAppOrServicePrincipalCredential.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedDeletedByNonApprovedUser.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedDeletedByNonApprovedUser.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationRedirectURLUpdate.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ADFSDomainTrustMods.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ADFSDomainTrustMods.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundDirectSettingsChanged.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundDirectSettingsChanged.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoPIMSettings.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousOAuthApp_OfflineAccess.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousOAuthApp_OfflineAccess.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestUsersInvitedtoTenantbyNewInviters.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_NewAppOrServicePrincipalCredential.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_NewAppOrServicePrincipalCredential.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/CredentialAddedAfterAdminConsent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/CredentialAddedAfterAdminConsent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UseraddedtoPrivilgedGroups.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UseraddedtoPrivilgedGroups.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivilegedAccountPermissionsChanged.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AzureADRoleManagementPermissionGrant.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AzureADRoleManagementPermissionGrant.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserStatechangedfromGuesttoMember.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundCollaborationSettingsChanged.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundCollaborationSettingsChanged.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestAccountsAddedinAADGroupsOtherThanTheOnesSpecified.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestAccountsAddedinAADGroupsOtherThanTheOnesSpecified.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_ADFSDomainTrustMods.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_ADFSDomainTrustMods.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MailPermissionsAddedToApplication.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MailPermissionsAddedToApplication.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationAdded.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationAdded.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PIMElevationRequestRejected.yaml]" time="0.006"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/PIMElevationRequestRejected.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivlegedRoleAssignedOutsidePIM.yaml]" time="0.012"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivlegedRoleAssignedOutsidePIM.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundCollaborationSettingsChanged.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundCollaborationSettingsChanged.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAssignedPrivilegedRole.yaml]" time="0.007"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAssignedPrivilegedRole.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/QualysVM/NewHighSeverityVulnDetectedAcrossMulitpleHosts.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/QualysVM/HighNumberofVulnDetected.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Heartbeat/OMI_vulnerability_detection.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/Heartbeat/MissingDCHearbeat.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-SQLiDetection.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-XSSDetection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-XSSDetection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-SQLiDetection.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-SQLiDetection.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-XSSDetection.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/GitHub/Threat Intel Matches to GitHub Audit Logs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/Threat Intel Matches to GitHub Audit Logs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/GitHub/NRT Two Factor Authentication Disabled.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/NRT Two Factor Authentication Disabled.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/GitHub/Security Vulnerability in Repo.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/Security Vulnerability in Repo.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...gerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceNetworkEvents/SolarWinds_SUNBURST_Network-IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceNetworkEvents/SolarWinds_SUNBURST_Network-IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/SolarWinds_SUNBURST_&amp;_SUPERNOVA_File-IOCs.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/SolarWinds_SUNBURST_&amp;_SUPERNOVA_File-IOCs.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/PEfiledroppedinColorDriversFolder.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRareUserAgentDetected.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionToUnpopularWebsiteDetected.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestAllowedHarmfulMaliciousURICategory.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaCryptoMinerUserAgentDetected.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionNon-CorporatePrivateNetwork.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaPowershellUserAgentDetected.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaURIContainsIPAddress.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestBlocklistedFileType.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaEmptyUserAgentDetected.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaHackToolUserAgentDetected.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_MailForwarding.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_MailForwarding.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewUserAgent.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewUserAgent.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_Uploaded_Executables.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_Uploaded_Executables.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/office_policytampering.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/office_policytampering.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ForestBlizzardCredHarvesting.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ForestBlizzardCredHarvesting.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Office_MailForwarding.yaml]" time="0.002"><failure message="AssertionError: [{'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'queryFrequency'}, {'error': 'field required', 'field': 'queryPeriod'}, {'error': 'field required', 'field': 'triggerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Office_MailForwarding.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'queryFrequency'}, {'error': 'field required', 'field': 'queryPeriod'}, {'error': 'field required', 'field': 'triggerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewIP.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewIP.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/RareOfficeOperations.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/RareOfficeOperations.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MultipleTeamsDeletes.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MultipleTeamsDeletes.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Mail_redirect_via_ExO_transport_rule.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Mail_redirect_via_ExO_transport_rule.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/External User added to Team and immediately uploads file.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/External User added to Team and immediately uploads file.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Malicious_Inbox_Rule.yaml]" time="0.002"><failure message="AssertionError: [{'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'queryFrequency'}, {'error': 'field required', 'field': 'queryPeriod'}, {'error': 'field required', 'field': 'triggerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Malicious_Inbox_Rule.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'queryFrequency'}, {'error': 'field required', 'field': 'queryPeriod'}, {'error': 'field required', 'field': 'triggerOperator'}, {'error': 'field required', 'field': 'triggerThreshold'}], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Malicious_Inbox_Rule.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Malicious_Inbox_Rule.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/exchange_auditlogdisabled.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/exchange_auditlogdisabled.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ExternalUserAddedRemovedInTeams.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ExternalUserAddedRemovedInTeams.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MailItemsAccessedTimeSeries.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MailItemsAccessedTimeSeries.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/AdFind_Usage.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/AdFind_Usage.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/SolarWinds_SUNBURST_Process-IOCs.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/OMIGODVulnerableMachines.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/Log4jVulnerableMachines.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/Log4jVulnerableMachines.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_base64_encoded_pefile.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imFileEvent_Dev-0228FilePathHashesNovember2021(ASIMVersion).yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_AdFind_Usage.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_malware_in_recyclebin.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/SdeletedeployedviaGPOandrunrecursively(ASIMVersion).yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/Potentialre-namedsdeleteusage(ASIMVersion).yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies(ASIMVersion).yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_MidnightBlizzard_SuspiciousRundll32Exec.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_SolarWinds_SUNBURST_Process-IOCs.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/DetectPIMAlertDisablingActivity.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/MDE_hitsforADFandAzureSynapsePipelines.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVTarrask.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVTarrask.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Dev-0530AVHits.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CorrelateIPC_Unfamiliar-Atypical.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CorrelateIPC_Unfamiliar-Atypical.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AquaBlizzardAVHits.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AquaBlizzardAVHits.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVSpringShell.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVSpringShell.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/EuropiumAVHits.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CoreBackupDeletionwithSecurityAlert.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CoreBackupDeletionwithSecurityAlert.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Suspicious_WorkSpaceDeletion_Attempt.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Massdownload_USBFileCopy.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVdetectionsrelatedtoUkrainebasedthreats.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVdetectionsrelatedtoUkrainebasedthreats.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'version', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/HiveRansomwareAVHits.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Solorigate-Defender-Detections.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthSigninsMultipleCountries.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthBruteForce.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthPasswordSpray.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imSigninAttemptsByIPviaDisabledAccounts.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/PulseConnectSecure/PulseConnectSecureVPN-CVE_2021_22893_Exploit.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/MaliciousWAFSessions.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/MaliciousWAFSessions.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/AzureWAFmatching_log4j_vuln.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/AzureWAFmatching_log4j_vuln.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/TimeSeriesKeyvaultAccessAnomaly.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/TimeSeriesKeyvaultAccessAnomaly.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/NRT_KeyVaultSensitiveOperations.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/NRT_KeyVaultSensitiveOperations.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyvaultMassSecretRetrieval.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyvaultMassSecretRetrieval.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyVaultSensitiveOperations.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyVaultSensitiveOperations.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DuoSecurity/IPEntity_DuoSecurity.yaml]" time="0.001"><failure message="AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]&#10;assert False&#10; +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)">detections = '../d3vzer0/sentinel-cicd/Detections/DuoSecurity/IPEntity_DuoSecurity.yaml'

    def test_format(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                error_content = [{'field': error._loc, 'error': error.exc.msg_template} for error in err.raw_errors]
                kql_content = error_content
    
&gt;       assert isinstance(kql_content, KQL), f'{kql_content}'
E       AssertionError: [{'field': 'severity', 'error': 'field required'}, {'field': 'queryFrequency', 'error': 'field required'}, {'field': 'queryPeriod', 'error': 'field required'}, {'field': 'triggerOperator', 'error': 'field required'}, {'field': 'triggerThreshold', 'error': 'field required'}, {'field': 'query', 'error': 'field required'}, {'field': 'kind', 'error': 'field required'}]
E       assert False
E        +  where False = isinstance([{'error': 'field required', 'field': 'severity'}, {'error': 'field required', 'field': 'queryFrequency'}, {'error': '...erator'}, {'error': 'field required', 'field': 'triggerThreshold'}, {'error': 'field required', 'field': 'query'}, ...], KQL)

prevalidate/sentinel/test_stages/test_sentinel.py:15: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/DuoSecurity/TrustMonitorEvent.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/BehaviorAnalytics/SuspiciousSigninByAADConnectAccount.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/MultiVendor-PossibleDGAContacts.yaml]" time="0.003" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/TimeSeriesAnomaly-MultiVendor_NetworkTraffic.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepySnailURLParameters.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveRequestSequence.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveURLs.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Wazuh-Large_Number_of_Web_errors_from_an_IP.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Fortinet-NetworkBeaconPattern.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/SupiciousLinkSharing.yaml]" time="0.001" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/E2EEDisbaled.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/JoiningMeetingFromAnotherTimeZone.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_format[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/ExternalUserAccess.yaml]" time="0.002" /><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareRunCommandPowerShellScript.yaml]" time="0.175"><failure message="AssertionError: [{'end': 48, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 48, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 48, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations exe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a7db90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations exe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations executing a unique PowerShell scr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareRunCommandPowerShellScript.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 48, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 48, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 48, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations exe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a7db90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations exe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='5239248b-abfb-4c6a-8177-b104ade5db56', name='Azure VM Run Command operations executing a unique PowerShell scr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareOperations.yaml]" time="0.001"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/RareOperations.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT-AADHybridHealthADFSNewServer.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT-AADHybridHealthADFSNewServer.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creation_of_Expensive_Computes_in_Azure.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creation_of_Expensive_Computes_in_Azure.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creating_Anomalous_Number_Of_Resources_detection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Creating_Anomalous_Number_Of_Resources_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NewResourceGroupsDeployedTo.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NewResourceGroupsDeployedTo.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSServiceDelete.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSServiceDelete.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
&gt;           parse_failures = kql_content.validate(workspace)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:27: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT_Creation_of_Expensive_Computes_in_Azure.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/NRT_Creation_of_Expensive_Computes_in_Azure.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSNewServer.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSNewServer.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSSuspApp.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AADHybridHealthADFSSuspApp.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/Granting_Permissions_To_Account_detection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/Granting_Permissions_To_Account_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/New-CloudShell-User.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/New-CloudShell-User.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/AzDiagSettingsDeleted.yaml]" time="0.005"><failure message="AssertionError: [{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed f...ame': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abc510&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed f...ame': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed from a resource', description=&quot;...name': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/AzDiagSettingsDeleted.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed f...ame': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abc510&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed f...ame': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='6e95aef3-a1e0-4063-8e74-cd59aa59f245', name='Azure Diagnostic settings removed from a resource', description="...name': 'KennethMLdk'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureActivity/TimeSeriesAnomaly_Mass_Cloud_Resource_Deletions.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureActivity/TimeSeriesAnomaly_Mass_Cloud_Resource_Deletions.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Failure.yaml]" time="0.002"><failure message="AssertionError: [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', descr...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9da50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', descr...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', description=&quot;'Identifies if an AV s...ame': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Failure.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', descr...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9da50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', descr...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='c2da1106-bfe4-4a63-bf14-5ab73130ccd5', name='AppServices AV Scan Failure', description="'Identifies if an AV s...ame': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Infected_Files_Found.yaml]" time="0.001"><failure message="AssertionError: [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': &quot;The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected F...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9d790&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected F...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected Files', description=&quot;'Identifie...ame': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureAppServices/AVScan_Infected_Files_Found.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 57, 'issue': 'AppServiceAntivirusScanAuditLogs', 'message': "The name 'AppServiceAntivirusScanAuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected F...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9d790&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected F...me': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='9d0295ee-cb75-4f2c-9952-e5acfbb67036', name='AppServices AV Scan with Infected Files', description="'Identifie...ame': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninBruteForce-AzurePortal.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninBruteForce-AzurePortal.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/FailedLogonToAzurePortal.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/FailedLogonToAzurePortal.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/BypassCondAccessRule.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/BypassCondAccessRule.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninPasswordSpray.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninPasswordSpray.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/DistribPassCrackAttempt.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/DistribPassCrackAttempt.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/NRT_MFARejectedbyUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/NRT_MFARejectedbyUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/PrivilegedUserLogonfromnewASN.yaml]" time="0.004"><failure message="AssertionError: [{'end': 24, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 24, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 24, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN'...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246048d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN'...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}})&gt; = KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN', description=&quot;'Detects a succ...{'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/PrivilegedUserLogonfromnewASN.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 24, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 24, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 24, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN'...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246048d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN'...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}})&gt; = KQL(id='55073036-bb86-47d3-a85a-b113ac3d9396', name='Privileged User Logon from new ASN', description="'Detects a succ...{'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Identity', 'Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninAttemptsByIPviaDisabledAccounts.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SigninAttemptsByIPviaDisabledAccounts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzureAADPowerShellAnomaly.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzureAADPowerShellAnomaly.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationAttemptfromNewCountry.yaml]" time="0.007"><failure message="AssertionError: [{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': &quot;The fuzzy union operand 'AADNonInteractiveUserSig...': &quot;The name 'state' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 7 == 0&#10; +  where 7 = len([{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': &quot;The fuzzy union operand 'AADNonInteractiveUserSig...': &quot;The name 'state' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': &quot;The fuzzy union operand 'AADNonInteractiveUserSig...': &quot;The name 'state' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Cou...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9d950&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Cou...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Country', description=&quot;'Detects w... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationAttemptfromNewCountry.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': "The fuzzy union operand 'AADNonInteractiveUserSig...': "The name 'state' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}, ...]
E           assert 7 == 0
E            +  where 7 = len([{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': "The fuzzy union operand 'AADNonInteractiveUserSig...': "The name 'state' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 74, 'issue': 'AADNonInteractiveUserSignInLogs', 'message': "The fuzzy union operand 'AADNonInteractiveUserSig...': "The name 'state' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Cou...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9d950&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Cou...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ef895ada-e8e8-4cf0-9313-b1ab67fab69f', name='Authentication Attempt from New Country', description="'Detects w... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ServicePrincipalAuthenticationAttemptfromNewCountry.yaml]" time="0.002"><failure message="AssertionError: [{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': &quot;The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': &quot;The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': &quot;The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication At...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1173462d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication At...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication Attempt from New Country', descr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/ServicePrincipalAuthenticationAttemptfromNewCountry.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': "The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': "The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 55, 'issue': 'AADServicePrincipalSignInLogs', 'message': "The name 'AADServicePrincipalSignInLogs' does not r...rvicePrincipalSignInLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication At...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1173462d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication At...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1baaaf00-655f-4de9-8ff8-312e902cda71', name='Service Principal Authentication Attempt from New Country', descr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/BruteForceCloudPC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/BruteForceCloudPC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomalousUserAppSigninLocationIncrease-detection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomalousUserAppSigninLocationIncrease-detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SuccessThenFail_DiffIP_SameUserandApp.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SuccessThenFail_DiffIP_SameUserandApp.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/MFARejectedbyUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/MFARejectedbyUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ExplicitMFADeny.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/ExplicitMFADeny.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationsofPrivilegedAccountsOutsideofExpectedControls.yaml]" time="0.003"><failure message="AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 5 == 0&#10; +  where 5 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accou...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abe7d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accou...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accounts Outside of Expected Contro...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AuthenticationsofPrivilegedAccountsOutsideofExpectedControls.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 5 == 0
E            +  where 5 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accou...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abe7d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accou...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='af435ca1-fb70-4de1-92c1-7435c48482a9', name='Authentications of Privileged Accounts Outside of Expected Contro...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/UserAccounts-CABlockedSigninSpikes.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/UserAccounts-CABlockedSigninSpikes.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/ADFSSignInLogsPasswordSpray.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/ADFSSignInLogsPasswordSpray.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomolousSingleFactorSignin.yaml]" time="0.002"><failure message="AssertionError: [{'end': 33, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 33, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 33, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', de...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a38250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', de...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', description=&quot;'Detects successful... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AnomolousSingleFactorSignin.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 33, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 33, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 33, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', de...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a38250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', de...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f7c3f5c8-71ea-49ff-b8b3-148f0e346291', name='Anomolous Single Factor Signin', description="'Detects successful... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/SeamlessSSOPasswordSpray.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/SeamlessSSOPasswordSpray.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzurePortalSigninfromanotherAzureTenant.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/AzurePortalSigninfromanotherAzureTenant.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SigninLogs/DisabledAccountSigninsAcrossManyApplications.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SigninLogs/DisabledAccountSigninsAcrossManyApplications.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureSQL.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureSQL.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AWSCloudTrail.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AWSCloudTrail.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_CustomSecurityLog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_CustomSecurityLog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityAlert.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityAlert.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityEvent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SecurityEvent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_AuditLogs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_AuditLogs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_W3CIISLog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_W3CIISLog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_OfficeActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_OfficeActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_SecurityAlerts.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_SecurityAlerts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SigninLogs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_SigninLogs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_DnsEvents.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_DnsEvents.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_VMConnection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_VMConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_AzureActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_AzureActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_CommonSecurityLog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_CommonSecurityLog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_CommonSecurityLog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_CommonSecurityLog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_Syslog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_Syslog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_DnsEvents.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_DnsEvents.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureKeyVault.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureKeyVault.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_SecurityEvent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/FileHashEntity_SecurityEvent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_PaloAlto.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_PaloAlto.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureFirewall.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureFirewall.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_imWebSession.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_imWebSession.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureNetworkAnalytics.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AzureNetworkAnalytics.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AppServiceHTTPLogs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_AppServiceHTTPLogs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_Syslog.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_Syslog.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_SecurityAlert.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_SecurityAlert.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_OfficeActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPEntity_OfficeActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_PaloAlto.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_PaloAlto.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPentity_SigninLogs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/IPentity_SigninLogs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_PaloAlto.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/EmailEntity_PaloAlto.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_OfficeActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/URLEntity_OfficeActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_imWebSession.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ThreatIntelligenceIndicator/DomainEntity_imWebSession.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ClearStopChangeTrailLogs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ClearStopChangeTrailLogs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToRDSDatabase.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToRDSDatabase.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_FullAdminPolicyAttachedToRolesUsersGroups.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_FullAdminPolicyAttachedToRolesUsersGroups.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/SuspiciousAccessOfBECRelatedDocumentsInAWSS3Buckets.yaml]" time="0.010"><failure message="AssertionError: [{'end': 524, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 524, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 524, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related do...ntName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9c650&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related do...ntName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None)&gt; = KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related documents in AWS S3 buckets', de...entName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/SuspiciousAccessOfBECRelatedDocumentsInAWSS3Buckets.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 524, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 524, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 524, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related do...ntName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a9c650&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related do...ntName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None)&gt; = KQL(id='f3e2d35f-1202-4215-995c-4654ef07d1d8', name='Suspicious access of BEC related documents in AWS S3 buckets', de...entName, UserAgent, SourceIpAddress, CountOfDocs, Baseline, Score\n', version='1.0.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/NRT_AWS_ConsoleLogonWithoutMFA.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/NRT_AWS_ConsoleLogonWithoutMFA.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToVPC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ChangeToVPC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_IngressEgressSecurityGroupChange.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_IngressEgressSecurityGroupChange.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ConsoleLogonWithoutMFA.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_ConsoleLogonWithoutMFA.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_LoadBalancerSecGroupChange.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_LoadBalancerSecGroupChange.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_CredentialHijack.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSCloudTrail/AWS_CredentialHijack.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_ExcessiveNXDOMAINDNSQueries.yaml]" time="0.003"><failure message="AssertionError: [{'end': 28, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'E..., 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 28, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'E..., 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 28, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'E..., 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASI...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a639d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASI...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASIM DNS Schema)', description=&quot;'...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_ExcessiveNXDOMAINDNSQueries.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 28, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'E..., 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 28, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'E..., 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 28, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'E..., 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASI...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a639d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASI...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='c3b11fb2-9201-4844-b7b9-6b7bf6d9b851', name='Excessive NXDOMAIN DNS Queries (ASIM DNS Schema)', description="'...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_HighNXDomainCount_detection.yaml]" time="0.013"><failure message="AssertionError: [{'end': 146, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 146, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 146, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Sc...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246d85d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Sc...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Schema)', description=&quot;'Identifi...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_HighNXDomainCount_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 146, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 146, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 146, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Sc...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246d85d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Sc...'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='983a6922-894d-413c-9f04-d7add0ecc307', name='Potential DGA detected (ASIM DNS Schema)', description="'Identifi...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_TorProxies.yaml]" time="0.002"><failure message="AssertionError: [{'end': 528, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 528, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 528, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a77b10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt; = KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  (ASIM DNS Schema)', descriptio...TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_TorProxies.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 528, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 528, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 528, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a77b10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt; = KQL(id='3fe3c520-04f1-44b8-8398-782ed21435f8', name='DNS events related to ToR proxies  (ASIM DNS Schema)', descriptio...TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_Miners.yaml]" time="0.003"><failure message="AssertionError: [{'end': 1291, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 1291, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 1291, 'issue': '_Im_Dns', 'message': &quot;The name '_Im_Dns' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124618110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt; = KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools (ASIM DNS Schema)', descriptio...TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDNS_Miners.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 1291, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 1291, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 1291, 'issue': '_Im_Dns', 'message': "The name '_Im_Dns' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124618110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools ...imeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None)&gt; = KQL(id='c094384d-7ea7-4091-83be-18706ecca981', name='DNS events related to mining pools (ASIM DNS Schema)', descriptio...TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Dvc\n', version='1.3.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_IPEntity_DnsEvents.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_IPEntity_DnsEvents.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_DomainEntity_DnsEvents.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimDNS/imDns_DomainEntity_DnsEvents.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByUser.yaml]" time="0.005"><failure message="AssertionError: [{'end': 55, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 55, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 55, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a us...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abe690&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a us...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a user', description=&quot;'Identifies ...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 55, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 55, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 55, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a us...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abe690&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a us...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='884c4957-70ea-4f57-80b9-1bca3890315b', name='High count of failed logons by a user', description="'Identifies ...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighPortCountByClientIP.yaml]" time="0.003"><failure message="AssertionError: [{'end': 52, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 52, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 52, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client...'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e11cd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client...'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client IP on many ports', descriptio...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighPortCountByClientIP.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 52, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 52, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 52, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client...'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e11cd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client...'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='44a555d8-ecee-4a25-95ce-055879b4b14b', name='High count of connections by client IP on many ports', descriptio...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByClientIP.yaml]" time="0.003"><failure message="AssertionError: [{'end': 53, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 53, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 53, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ab3110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}})&gt; = KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from same client IP', description=&quot;...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/HighFailedLogonCountByClientIP.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 53, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 53, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 53, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ab3110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}})&gt; = KQL(id='19e01883-15d8-4eb6-a7a5-3276cd668388', name='High count of failed attempts from same client IP', description="...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/AnomomlousUserAgentConnection.yaml]" time="0.003"><failure message="AssertionError: [{'end': 82, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 82, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 82, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection att...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abca50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection att...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection attempt', description=&quot;'Identifie...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/AnomomlousUserAgentConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 82, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 82, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 82, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection att...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abca50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection att...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='f845881e-2500-44dc-8ed7-b372af3e1e25', name='Anomalous User Agent connection attempt', description="'Identifie...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/SilkTyphoonSuspiciousExchangeRequestPattern.yaml]" time="0.002"><failure message="AssertionError: [{'end': 34, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 34, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 34, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Re...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124617310&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Re...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Request', description=&quot;'This que...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/SilkTyphoonSuspiciousExchangeRequestPattern.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 34, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 34, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 34, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variabl...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Re...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124617310&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Re...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='23005e87-2d3a-482b-b03d-edbebd1ae151', name='Silk Typhoon Suspicious Exchange Request', description="'This que...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/Supernovawebshell.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description=&quot;'...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a7d390&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description=&quot;'...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description=&quot;'Identifies SUPERNOVA webshell ...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/Supernovawebshell.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description="'...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a7d390&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description="'...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='2acc91c3-17c2-4388-938e-4eac2d5894e8', name='SUPERNOVA webshell', description="'Identifies SUPERNOVA webshell ...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/ProxyShellPwn2Own.yaml]" time="0.003"><failure message="AssertionError: [{'end': 54, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 54, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 54, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShe...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e2a6d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShe...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShell - Detection', description=&quot;...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/ProxyShellPwn2Own.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 54, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 54, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 54, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShe...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e2a6d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShe...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='968358d6-6af8-49bb-aaa4-187b3067fb95', name='Exchange SSRF Autodiscover ProxyShell - Detection', description="...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/W3CIISLog/MaliciousAlertLinkedWebRequests.yaml]" time="0.004"><failure message="AssertionError: [{'end': 294, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 294, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 294, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...e': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests ...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e02310&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests ...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests linked with Microsoft Defender...'}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/W3CIISLog/MaliciousAlertLinkedWebRequests.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 294, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 294, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 294, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...e': "The name 'W3CIISLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests ...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e02310&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests ...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='fbfbf530-506b-49a4-81ad-4030885a195c', name='Malicious web application requests linked with Microsoft Defender...'}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Syslog/ssh_potentialBruteForce.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/ssh_potentialBruteForce.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Syslog/squid_cryptomining_pools.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/squid_cryptomining_pools.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Syslog/FailedLogonAttempts_UnknownUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/FailedLogonAttempts_UnknownUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Syslog/squid_tor_proxies.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/squid_tor_proxies.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Syslog/NRT_squid_events_for_mining_pools.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/Syslog/NRT_squid_events_for_mining_pools.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODHighRiskNotDiscarded.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODHighRiskNotDiscarded.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODBinaryInAttachment.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODBinaryInAttachment.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderInTIList.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderInTIList.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderIPinTIList.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODEmailSenderIPinTIList.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODDataExfiltrationToPrivateEmail.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODDataExfiltrationToPrivateEmail.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleArchivedAttachmentsToSameRecipient.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleArchivedAttachmentsToSameRecipient.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODSuspiciousAttachment.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODSuspiciousAttachment.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODWeakCiphers.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODWeakCiphers.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleProtectedEmailsToUnknownRecipient.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleProtectedEmailsToUnknownRecipient.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleLargeEmailsToSameRecipient.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ProofpointPOD/ProofpointPODMultipleLargeEmailsToSameRecipient.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADORetentionReduced.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADORetentionReduced.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADONewExtensionAdded.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADONewExtensionAdded.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricPrPolicyBypassing.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricPrPolicyBypassing.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NRT_ADOAuditStreamDisabled.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NRT_ADOAuditStreamDisabled.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOServiceConnectionUsage.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOServiceConnectionUsage.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPipelineCreatedDeletedOneDay.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPipelineCreatedDeletedOneDay.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAuditStreamDisabled.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAuditStreamDisabled.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPipelineModifiedbyNewUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPipelineModifiedbyNewUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPATUsedWithBrowser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOPATUsedWithBrowser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOSecretNotSecured.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOSecretNotSecured.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAgentPoolCreatedDeleted.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOAgentPoolCreatedDeleted.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOVariableModifiedByNewUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ADOVariableModifiedByNewUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewAgentAddedToPoolbyNewUserorofNewOS.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewAgentAddedToPoolbyNewUserorofNewOS.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewPAPCAPCASaddedtoADO.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/NewPAPCAPCASaddedtoADO.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ExternalUpstreamSourceAddedtoAzureDevOpsFeed.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/ExternalUpstreamSourceAddedtoAzureDevOpsFeed.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPatSessionMisuse.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOPatSessionMisuse.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricServiceConnectionAdds.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOHistoricServiceConnectionAdds.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOAdminGroupAdditions.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDevOpsAuditing/AzDOAdminGroupAdditions.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/SuspiciousAccessOfBECRelatedDocuments.yaml]" time="0.004"><failure message="AssertionError: [{'end': 529, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 529, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 529, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related do...t, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e3fb90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related do...t, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related documents', description=&quot;'This q...ct, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/SuspiciousAccessOfBECRelatedDocuments.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 529, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 529, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 529, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related do...t, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e3fb90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related do...t, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='cd8d946d-10a4-40a9-bac1-6d0a6c847d65', name='Suspicious access of BEC related documents', description="'This q...ct, FilePath, HttpUserAgent, IpAddr, CountOfDocs, Baseline, Score\n', version='1.0.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/imFileESolarWindsSunburstSupernova.yaml]" time="0.003"><failure message="AssertionError: [{'end': 267, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 267, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 267, 'issue': 'imFileEvent', 'message': &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor has...: {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e51bd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor has...: {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor hashes (Normalized File Events)',...': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimFileEvent/imFileESolarWindsSunburstSupernova.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 267, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 267, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 267, 'issue': 'imFileEvent', 'message': "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor has...: {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e51bd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor has...: {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='bc5ffe2a-84d6-48fe-bc7b-1055100469bc', name='SUNBURST and SUPERNOVA backdoor hashes (Normalized File Events)',...': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureFirewall/SeveralDenyActionsRegistered.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureFirewall/SeveralDenyActionsRegistered.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/SilkTyphoonSuspiciousFileDownloads.yaml]" time="0.002"><failure message="AssertionError: [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downlo...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e504d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downlo...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downloads.', description=&quot;'This quer...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/SilkTyphoonSuspiciousFileDownloads.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downlo...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e504d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downlo...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='03e04c97-8cae-48b3-9d2f-4ab262e4ffff', name='Silk Typhoon Suspicious File Downloads.', description="'This quer...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/ExchagngeSuspiciousFileDownloads.yaml]" time="0.002"><failure message="AssertionError: [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': &quot;The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Dow...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e51b50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Dow...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt; = KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Downloads.', description=&quot;'This q...nity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/http_proxy_oab_CL/ExchagngeSuspiciousFileDownloads.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 119, 'issue': 'http_proxy_oab_CL', 'message': "The name 'http_proxy_oab_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Dow...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e51b50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Dow...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt; = KQL(id='8955c0fb-3408-47b0-a3b9-a1faec41e427', name='Exchange Server Suspicious File Downloads.', description="'This q...nity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/WindowsEvents/ChiaCryptoMining_WindowsEvent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/WindowsEvents/ChiaCryptoMining_WindowsEvent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/WindowsEvents/CaramelTsunami_IOC_WindowsEvent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/WindowsEvents/CaramelTsunami_IOC_WindowsEvent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AWSGuardDuty/AWS_GuardDuty_template.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AWSGuardDuty/AWS_GuardDuty_template.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewOfficeUserAgentinDynamics.yaml]" time="0.002"><failure message="AssertionError: [{'end': 94, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 94, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 94, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 3...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e67110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 3...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 365', description=&quot;'Detects use...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewOfficeUserAgentinDynamics.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 94, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 94, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 94, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 3...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e67110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 3...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='572f3951-5fa3-4e42-9640-fe194d859419', name='New Office User Agent in Dynamics 365', description="'Detects use...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsAdminActivity.yaml]" time="0.002"><failure message="AssertionError: [{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', d...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462d6d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', d...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', description=&quot;'Detects users con...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsAdminActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', d...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462d6d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', d...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='e147e4dc-849c-49e9-9e8b-db4581951ff4', name='New Dynamics 365 Admin Activity', description="'Detects users con...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsUserAgent.yaml]" time="0.002"><failure message="AssertionError: [{'end': 155, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 155, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 155, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', descr...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e74290&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', descr...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', description=&quot;'Detects users accessi...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/NewDynamicsUserAgent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 155, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 155, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 155, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known t...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', descr...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e74290&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', descr...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='8ec3a7f9-9f55-4be3-aeb6-9188f91b278e', name='New Dynamics 365 User Agent', description="'Detects users accessi...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/DynamicsEncryptionSettingsChanged.yaml]" time="0.002"><failure message="AssertionError: [{'end': 19, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 19, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 19, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Change...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e846d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Change...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Changed', description=&quot;'This query l...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/DynamicsEncryptionSettingsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 19, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 19, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 19, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Change...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e846d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Change...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='b185ac23-dc27-4573-8192-1134c7a95f4f', name='Dynamics Encryption Settings Changed', description="'This query l...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/MassExportOfDynamicstoExcel.yaml]" time="0.009"><failure message="AssertionError: [{'end': 68, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 68, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 68, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x117345b90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records to Excel', description=&quot;'The ...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/MassExportOfDynamicstoExcel.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 68, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 68, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 68, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x117345b90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='05eca115-c4b5-48e4-ba6e-07db57695be2', name='Mass Export of Dynamics 365 Records to Excel', description="'The ...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/UserBulkRetreivalOutsideNormalActivity.yaml]" time="0.003"><failure message="AssertionError: [{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 69, 'issue': 'Dynamics365Activity', 'message': &quot;The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval ...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462c910&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval ...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval Outside Normal Activity', desc...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Dynamics365Activity/UserBulkRetreivalOutsideNormalActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 69, 'issue': 'Dynamics365Activity', 'message': "The name 'Dynamics365Activity' does not refer to any known ta...ame 'Dynamics365Activity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval ...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462c910&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval ...osoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}})&gt; = KQL(id='93a25f10-593d-4c57-a752-a8a75f031425', name='Dynamics 365 - User Bulk Retrieval Outside Normal Activity', desc...rosoft'}, 'support': {'tier': 'Microsoft'}, 'categories': {'domains': ['Cloud Provider', 'IT Operations', 'Storage']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Anomalies/UnusualAnomaly.yaml]" time="0.002"><failure message="AssertionError: [{'end': 200, 'issue': 'Anomalies', 'message': &quot;The name 'Anomalies' does not refer to any known table, tabular variab...e': &quot;The name 'Anomalies' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 200, 'issue': 'Anomalies', 'message': &quot;The name 'Anomalies' does not refer to any known table, tabular variab...e': &quot;The name 'Anomalies' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 200, 'issue': 'Anomalies', 'message': &quot;The name 'Anomalies' does not refer to any known table, tabular variab...e': &quot;The name 'Anomalies' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description=&quot;'Ano...{'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a5cc10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description=&quot;'Ano...{'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description=&quot;'Anomaly Rules generate events in ... {'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Anomalies/UnusualAnomaly.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 200, 'issue': 'Anomalies', 'message': "The name 'Anomalies' does not refer to any known table, tabular variab...e': "The name 'Anomalies' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 200, 'issue': 'Anomalies', 'message': "The name 'Anomalies' does not refer to any known table, tabular variab...e': "The name 'Anomalies' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 200, 'issue': 'Anomalies', 'message': "The name 'Anomalies' does not refer to any known table, tabular variab...e': "The name 'Anomalies' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description="'Ano...{'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a5cc10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description="'Ano...{'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d0255b5f-2a3c-4112-8744-e6757af3283a', name='Unusual Anomaly', description="'Anomaly Rules generate events in ... {'name': 'Jose Sebastian Canos'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Anomalies/SignInAnomaly.yaml]" time="0.006"><failure message="AssertionError: [{'end': 42, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 42, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 42, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', ... UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e64a90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', ... UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', description=&quot;'Identifies sign-...e UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Anomalies/SignInAnomaly.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 42, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 42, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 42, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', ... UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e64a90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', ... UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='9c1e9381-79dd-4ddf-9570-b73a1dc59fe0', name='Anomaly Sign In Event from an IP', description="'Identifies sign-...e UserCount &gt; 1 // looks for events targeting more than one user.\n', version='1.0.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/ExcessiveHTTPFailuresFromSource.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/ExcessiveHTTPFailuresFromSource.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PossibleBeaconingActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PossibleBeaconingActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/IPEntity_imNetworkSession.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/IPEntity_imNetworkSession.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PortScan.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/ASimNetworkSession/PortScan.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/LAQueryLogs/UserSearchingForVIPUserActivity.yaml]" time="0.002"><failure message="AssertionError: [{'end': 286, 'issue': 'LAQueryLogs', 'message': &quot;The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 286, 'issue': 'LAQueryLogs', 'message': &quot;The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 286, 'issue': 'LAQueryLogs', 'message': &quot;The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activi...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e72ed0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activi...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activity', description='This query m... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/LAQueryLogs/UserSearchingForVIPUserActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 286, 'issue': 'LAQueryLogs', 'message': "The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 286, 'issue': 'LAQueryLogs', 'message': "The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 286, 'issue': 'LAQueryLogs', 'message': "The name 'LAQueryLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activi...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e72ed0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activi...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f7f4a77e-f68f-4b56-9aaf-a0c9d87d7a8e', name='Users searching for VIP user activity', description='This query m... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_IOCsMay2021.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_IOCsMay2021.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270RegistryIOCSep2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270RegistryIOCSep2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialMercury_Webshell.yaml]" time="0.004"><failure message="AssertionError: [{'end': 76, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 76, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 76, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell cr...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462f9d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell cr...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell creation', description=&quot;'This qu...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialMercury_Webshell.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 76, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 76, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 76, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell cr...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462f9d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell cr...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='50eb4cbd-188f-44f4-b964-bab84dcdec10', name='Identify SysAid Server web shell creation', description="'This qu...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SigninFirewallCorrelation.yaml]" time="0.004"><failure message="AssertionError: [{'end': 51, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 51, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 51, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success ... 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e52a90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success ... 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success logon to Azure AD', descriptio..., 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SigninFirewallCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 51, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 51, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 51, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success ... 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e52a90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success ... 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='157c0cfc-d76d-463b-8755-c781608cdc1a', name='Cisco - firewall block but success logon to Azure AD', descriptio..., 'author': {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SeashellBlizzardIOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SeashellBlizzardIOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmailAccessviaActiveSync.yaml]" time="0.007"><failure message="AssertionError: [{'end': 133, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 133, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 133, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', desc... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125accc90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', desc... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', description='This query detects at...: {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmailAccessviaActiveSync.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 133, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 133, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 133, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', desc... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125accc90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', desc... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='2f561e20-d97b-4b13-b02d-18b34af6e87c', name='Email access via active sync', description='This query detects at...: {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetOct292020IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetOct292020IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumDomainIOC112020.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumDomainIOC112020.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MultiplePasswordresetsbyUser.yaml]" time="0.010"><failure message="AssertionError: [{'end': 785, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 5 == 0&#10; +  where 5 = len([{'end': 785, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 785, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', d...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a53250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', d...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', description=&quot;'This query will d...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MultiplePasswordresetsbyUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 785, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 5 == 0
E            +  where 5 = len([{'end': 785, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 785, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', d...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a53250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', d...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0b9ae89d-8cad-461c-808f-0494f70ad5c4', name='Multiple Password Reset by user', description="'This query will d...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RubySleetOct292020IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RubySleetOct292020IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SilkTyphoonUmServiceSuspiciousFile.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SilkTyphoonUmServiceSuspiciousFile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64IPInURLFromMDE.yaml]" time="0.004"><failure message="AssertionError: [{'end': 730, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 730, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 730, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded ... 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a3a010&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded ... 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt; = KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded in web request', description=&quot;...: 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64IPInURLFromMDE.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 730, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 730, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 730, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...ame 'DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded ... 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a3a010&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded ... 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt; = KQL(id='a4ce20ae-a2e4-4d50-b40d-d49f1353b6cc', name='IP address of Windows host encoded in web request', description="...: 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270PowershellSep2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270PowershellSep2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialFodhelperUACBypass(ASIMVersion).yaml]" time="0.002"><failure message="AssertionError: [{'end': 10, 'issue': 'imRegistry', 'message': &quot;The name 'imRegistry' does not refer to any known table, tabular varia...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 10, 'issue': 'imRegistry', 'message': &quot;The name 'imRegistry' does not refer to any known table, tabular varia...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 10, 'issue': 'imRegistry', 'message': &quot;The name 'imRegistry' does not refer to any known table, tabular varia...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASI...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125acf210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASI...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASIM Version)', description=&quot;'Thi... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialFodhelperUACBypass(ASIMVersion).yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 10, 'issue': 'imRegistry', 'message': "The name 'imRegistry' does not refer to any known table, tabular varia...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 10, 'issue': 'imRegistry', 'message': "The name 'imRegistry' does not refer to any known table, tabular varia...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 10, 'issue': 'imRegistry', 'message': "The name 'imRegistry' does not refer to any known table, tabular varia...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASI...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125acf210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASI...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ac9e233e-44d4-45eb-b522-6e47445f6582', name='Potential Fodhelper UAC Bypass (ASIM Version)', description="'Thi... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ChiaCryptoMining.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ChiaCryptoMining.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RunCommandUEBABreach.yaml]" time="0.003"><failure message="AssertionError: [{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'AzureActivity', 'message': &quot;The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation exec...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259c9550&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation exec...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation executed during suspicious login w...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/RunCommandUEBABreach.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'AzureActivity', 'message': "The name 'AzureActivity' does not refer to any known table, tabular... name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation exec...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259c9550&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation exec...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}})&gt; = KQL(id='11bda520-a965-4654-9a45-d09f372f71aa', name='Azure VM Run Command operation executed during suspicious login w...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialBuildProcessCompromiseMDE.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PotentialBuildProcessCompromiseMDE.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_IP_Domain_Hash_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_IP_Domain_Hash_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumIPIOC112020.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/BariumIPIOC112020.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MalformedUserAgents.yaml]" time="0.004"><failure message="AssertionError: [{'end': 35, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 7 == 0&#10; +  where 7 = len([{'end': 35, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 35, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description=... {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12461bb90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description=... {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description=&quot;'Malware authors will sometim...: {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MalformedUserAgents.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 7 == 0
E            +  where 7 = len([{'end': 35, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 35, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabul...he name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description=... {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12461bb90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description=... {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='a357535e-f722-4afe-b375-cff362b2b376', name='Malformed user agent', description="'Malware authors will sometim...: {'name': 'timbMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTHashes.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTHashes.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HostAADCorrelation.yaml]" time="0.004"><failure message="AssertionError: [{'end': 169, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 169, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 169, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...sage': &quot;The name 'Syslog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12461b110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logon to AzureAD', description=&quot;'I...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HostAADCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 169, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 169, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 169, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...sage': "The name 'Syslog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12461b110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1ce5e766-26ab-4616-b7c8-3b33ae321e80', name='Failed host logons but success logon to AzureAD', description="'I...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardJuly2019IOCs.yaml]" time="0.005"><failure message="AssertionError: [{'end': 505, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 8 == 0&#10; +  where 8 = len([{'end': 505, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 505, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125aed410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains - July 2019', description=&quot;'M...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardJuly2019IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 505, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 8 == 0
E            +  where 8 = len([{'end': 505, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 505, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...AZFWApplicationRule' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125aed410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains...name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='074ce265-f684-41cd-af07-613c5f3e6d0d', name='Known Forest Blizzard group domains - July 2019', description="'M...'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-VM-Network.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-VM-Network.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuditPolicyManipulation_using_auditpol.yaml]" time="0.004"><failure message="AssertionError: [{'end': 360, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 360, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 360, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using aud..., 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e7a490&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using aud..., 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using auditpol utility', description='T...}, 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuditPolicyManipulation_using_auditpol.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 360, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 360, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 360, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using aud..., 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e7a490&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using aud..., 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='66276b14-32c5-4226-88e3-080dacc31ce1', name='Audit policy manipulation using auditpol utility', description='T...}, 'author': {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AquaBlizzardFeb2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AquaBlizzardFeb2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/KnownMintSandstormDomainsIP-October2020.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/KnownMintSandstormDomainsIP-October2020.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrivilegedAccountsSigninFailureSpikes.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrivilegedAccountsSigninFailureSpikes.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuthenticationMethodsChangedforPrivilegedAccount.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AuthenticationMethodsChangedforPrivilegedAccount.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_FoggyWeb.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_FoggyWeb.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/powershell_MangoSandstorm.yaml]" time="0.003"><failure message="AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a92710&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell commands', description=&quot;'The ...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/powershell_MangoSandstorm.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...he name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a92710&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='ce74dc9a-cb3c-4081-8c2f-7d39f6b7bae1', name='Identify Mango Sandstorm powershell commands', description="'The ...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AdditionalFilesUploadedByActor.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AdditionalFilesUploadedByActor.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PlaidRainIPIoC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PlaidRainIPIoC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NetworkEndpointCorrelation.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NetworkEndpointCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MSHTMLVuln.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MSHTMLVuln.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UnusualGuestActivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UnusualGuestActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0228FilePathHashesNovember2021.yaml]" time="0.003"><failure message="AssertionError: [{'end': 751, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known t...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 751, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known t...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 751, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known t...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e99610&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November 2021', description=&quot;'This hunt...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0228FilePathHashesNovember2021.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 751, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known t..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 751, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known t..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 751, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known t..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e99610&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='3b443f22-9be9-4c35-ac70-a94757748439', name='Dev-0228 File Path Hashes November 2021', description="'This hunt...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MailBoxTampering.yaml]" time="0.004"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with ma...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124649d50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with ma...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with mailbox permission tampering &amp; P...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MailBoxTampering.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with ma...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124649d50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with ma...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1399664f-9434-497c-9cde-42e4d74ae20e', name='Detecting Impossible travel with mailbox permission tampering &amp; P...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AAD_PAVPN_Correlation.yaml]" time="0.004"><failure message="AssertionError: [{'end': 948, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 948, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 948, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD lo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e7b210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD lo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD logins successfully logs in to P...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AAD_PAVPN_Correlation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 948, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 948, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 948, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD lo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e7b210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD lo...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='ba144bf8-75b8-406f-9420-ed74397f9479', name='IP with multiple failed Azure AD logins successfully logs in to P...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ADFS-DKM-MasterKey-Export.yaml]" time="0.003"><failure message="AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', descri...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x117344690&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', descri...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', description=&quot;'Identifies an export o...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ADFS-DKM-MasterKey-Export.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', descri...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x117344690&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', descri...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='18e6a87e-9d06-4a4e-8b59-3469cd49552d', name='ADFS DKM Master Key Export', description="'Identifies an export o...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-Network-Beacon.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Solorigate-Network-Beacon.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270NewUserSep2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270NewUserSep2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EUROPIUM _September2022.yaml]" time="0.019"><failure message="AssertionError: [{'end': 461, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 11 == 0&#10; +  where 11 = len([{'end': 461, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 461, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - Septe...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e61890&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - Septe...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - September 2022', description=&quot;'Iden...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EUROPIUM _September2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 461, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 11 == 0
E            +  where 11 = len([{'end': 461, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 461, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - Septe...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e61890&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - Septe...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='9d8b5a18-b7db-4c23-84a6-95febaf7e1e4', name='Europium - Hash and IP IOCs - September 2022', description="'Iden...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NylonTyphoonIOCsNov2021.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NylonTyphoonIOCsNov2021.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_July2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_July2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AWSConsoleAADCorrelation.yaml]" time="0.002"><failure message="AssertionError: [{'end': 151, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabula...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 151, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabula...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 151, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabula...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but succe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abc290&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but succe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but success logon to AzureAD', descript...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AWSConsoleAADCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 151, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabula...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 151, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabula...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 151, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabula...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but succe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125abc290&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but succe...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='910124df-913c-47e3-a7cd-29e1643fa55e', name='Failed AWS Console logons but success logon to AzureAD', descript...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_FileExtRename.yaml]" time="0.003"><failure message="AssertionError: [{'end': 40, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, t...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 40, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, t...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 40, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, t...: &quot;The name 'imFileEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', de...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e84050&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', de...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', description=&quot;'Dev-0530 actors ar...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0530_FileExtRename.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 40, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, t...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 40, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, t...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 40, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, t...: "The name 'imFileEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', de...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e84050&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', de...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d82eb796-d1eb-43c8-a813-325ce3417cef', name='Dev-0530 File Extension Rename', description="'Dev-0530 actors ar...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Log4J_IPIOC_Dec112021.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Log4J_IPIOC_Dec112021.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NewUserAgentLast24h.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/NewUserAgentLast24h.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/WSLMalwareCorrelation.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/WSLMalwareCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AnomalousIPUsageFollowedByTeamsAction.yaml]" time="0.008"><failure message="AssertionError: [{'end': 2066, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 2066, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 2066, 'issue': 'OfficeActivity', 'message': &quot;The name 'OfficeActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams a...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e78f10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams a...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams action', description=&quot;'Detects ...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AnomalousIPUsageFollowedByTeamsAction.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 2066, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 2066, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 2066, 'issue': 'OfficeActivity', 'message': "The name 'OfficeActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams a...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e78f10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams a...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='2b701288-b428-4fb8-805e-e4372c574786', name='Anomalous login followed by Teams action', description="'Detects ...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiFileHashesJuly2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiFileHashesJuly2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADHostLoginCorrelation.yaml]" time="0.008"><failure message="AssertionError: [{'end': 502, 'issue': 'Syslog', 'message': &quot;The name 'Syslog' does not refer to any known table, tabular variable or ... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 502, 'issue': 'Syslog', 'message': &quot;The name 'Syslog' does not refer to any known table, tabular variable or ... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 502, 'issue': 'Syslog', 'message': &quot;The name 'Syslog' does not refer to any known table, tabular variable or ... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259f9e90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success logon to host', description=&quot;'I...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADHostLoginCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 502, 'issue': 'Syslog', 'message': "The name 'Syslog' does not refer to any known table, tabular variable or ... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 502, 'issue': 'Syslog', 'message': "The name 'Syslog' does not refer to any known table, tabular variable or ... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 502, 'issue': 'Syslog', 'message': "The name 'Syslog' does not refer to any known table, tabular variable or ... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259f9e90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='8ee967a2-a645-4832-85f4-72b635bcb3a6', name='Failed AzureAD logons but success logon to host', description="'I...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousLoginfromDeletedExternalIdentities.yaml]" time="0.002"><failure message="AssertionError: [{'end': 49, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 49, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 49, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...': &quot;The name 'SigninLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259d4a50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest account', description=&quot;' This...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousLoginfromDeletedExternalIdentities.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 49, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 49, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 49, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...': "The name 'SigninLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1259d4a50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='defe4855-0d33-4362-9557-009237623976', name='Suspicious Login from deleted guest account', description="' This...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_AVHits_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_AVHits_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiC2DomainsJuly2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiC2DomainsJuly2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Mercury_Log4j_August2022.yaml]" time="0.011"><failure message="AssertionError: [{'end': 521, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 18 == 0&#10; +  where 18 = len([{'end': 521, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 521, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12453bc90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs - August 2022', description=&quot;'...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Mercury_Log4j_August2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 521, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 18 == 0
E            +  where 18 = len([{'end': 521, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 521, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...DeviceNetworkEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12453bc90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='ae10c588-7ff7-486c-9920-ab8b0bdb6ede', name='Mercury - Domain, Hash and IP IOCs - August 2022', description="'...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeServerVulnerabilitiesMarch2021IoCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeServerVulnerabilitiesMarch2021IoCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64UserInWebURIFromMDE.yaml]" time="0.003"><failure message="AssertionError: [{'end': 183, 'issue': 'DeviceEvents', 'message': &quot;The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 183, 'issue': 'DeviceEvents', 'message': &quot;The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 183, 'issue': 'DeviceEvents', 'message': &quot;The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in ba...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462fc90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in ba...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in base64 web request', description...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/B64UserInWebURIFromMDE.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 183, 'issue': 'DeviceEvents', 'message': "The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 183, 'issue': 'DeviceEvents', 'message': "The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 183, 'issue': 'DeviceEvents', 'message': "The name 'DeviceEvents' does not refer to any known table, tabular ... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in ba...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12462fc90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in ba...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='6e715730-82c0-496c-983b-7a20c4590bd9', name='Windows host username encoded in base64 web request', description...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CadetBlizzard_Jan2022_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CadetBlizzard_Jan2022_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrestigeRansomwareIOCsOct22.yaml]" time="0.005"><failure message="AssertionError: [{'end': 323, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 7 == 0&#10; +  where 7 = len([{'end': 323, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 323, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022',...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed7710&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022',...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022', description=&quot;'This query look...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PrestigeRansomwareIOCsOct22.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 323, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 7 == 0
E            +  where 7 = len([{'end': 323, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 323, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table...viceImageLoadEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022',...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed7710&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022',...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='bca9c877-2afc-4246-a26d-087ab1cdcd5f', name='Prestige ransomware IOCs Oct 2022', description="'This query look...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_Filename_Commandline_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ZincOctober2022_Filename_Commandline_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270WMICDiscoverySep2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Dev-0270WMICDiscoverySep2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/StarBlizzardDomainsAugust2022.yaml]" time="0.004"><failure message="AssertionError: [{'end': 322, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 8 == 0&#10; +  where 8 = len([{'end': 322, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 322, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 202...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12464a0d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 202...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 2022', description=&quot;'Identifies a...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/StarBlizzardDomainsAugust2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 322, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 8 == 0
E            +  where 8 = len([{'end': 322, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 322, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'EmailUrlInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 202...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12464a0d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 202...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='2149d9bb-8298-444c-8f99-f7bf0274dd05', name='Star Blizzard C2 Domains August 2022', description="'Identifies a...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UserAgentSearch_log4j.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/UserAgentSearch_log4j.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HiveRansomwareJuly2022.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/HiveRansomwareJuly2022.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GraniteTyphoonIOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GraniteTyphoonIOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/COMRegistryKeyModifiedtoPointtoFileinColorDrivers.yaml]" time="0.003"><failure message="AssertionError: [{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': &quot;The name 'DeviceRegistryEvents' does not refer to any known...&quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': &quot;The name 'DeviceRegistryEvents' does not refer to any known...&quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': &quot;The name 'DeviceRegistryEvents' does not refer to any known...&quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12464a010&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point to File in Color Profile Folde... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/COMRegistryKeyModifiedtoPointtoFileinColorDrivers.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': "The name 'DeviceRegistryEvents' does not refer to any known..."The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': "The name 'DeviceRegistryEvents' does not refer to any known..."The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 268, 'issue': 'DeviceRegistryEvents', 'message': "The name 'DeviceRegistryEvents' does not refer to any known..."The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12464a010&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ed8c9153-6f7a-4602-97b4-48c336b299e1', name='COM Registry Key Modified to Point to File in Color Profile Folde... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Manganese_VPN-IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Manganese_VPN-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DEV-0322_SolarWinds_Serv-U_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DEV-0322_SolarWinds_Serv-U_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CaramelTsunami_IOC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/CaramelTsunami_IOC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TarraskHashIoC.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TarraskHashIoC.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MFADisable.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MFADisable.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PHOSPHORUSMarch2019IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/PHOSPHORUSMarch2019IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GainCodeExecutionADFSviaWMI.yaml]" time="0.006"><failure message="AssertionError: [{'end': 173, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...]&#10;assert 8 == 0&#10; +  where 8 = len([{'end': 173, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 173, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server ...{'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125eb8a90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server ...{'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server via Remote WMI Execution', des... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/GainCodeExecutionADFSviaWMI.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 173, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...]
E           assert 8 == 0
E            +  where 8 = len([{'end': 173, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...])
E            +    where [{'end': 173, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu... name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server ...{'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125eb8a90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server ...{'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0bd65651-1404-438b-8f63-eecddcec87b4', name='Gain Code Execution on ADFS Server via Remote WMI Execution', des... {'name': 'jannieli'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmeraldSleetIOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EmeraldSleetIOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SecurityServiceRegistryACLModification.yaml]" time="0.007"><failure message="AssertionError: [{'end': 764, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 5 == 0&#10; +  where 5 = len([{'end': 764, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 764, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modif...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed4b90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modif...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modification', description=&quot;'Identi...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SecurityServiceRegistryACLModification.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 764, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 5 == 0
E            +  where 5 = len([{'end': 764, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 764, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modif...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed4b90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modif...thor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='473d57e6-f787-435c-a16b-b38b51fa9a4b', name='Security Service Registry ACL Modification', description="'Identi...uthor': {'name': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_DomainIOCsMarch2021.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/MidnightBlizzard_DomainIOCsMarch2021.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetJan272021IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DiamondSleetJan272021IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiAVDetection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/DenimTsunamiAVDetection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTLogFile.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SUNSPOTLogFile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADAWSConsoleCorrelation.yaml]" time="0.004"><failure message="AssertionError: [{'end': 714, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 714, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 714, 'issue': 'AWSCloudTrail', 'message': &quot;The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125eee590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success logon to AWS Console', descript...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/AADAWSConsoleCorrelation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 714, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 714, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 714, 'issue': 'AWSCloudTrail', 'message': "The name 'AWSCloudTrail' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125eee590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success l...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='643c2025-9604-47c5-833f-7b4b9378a1f5', name='Failed AzureAD logons but success logon to AWS Console', descript...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousModificationofGlobalAdminProperties.yaml]" time="0.004"><failure message="AssertionError: [{'end': 62, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 62, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 62, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global A...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12465d410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global A...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global Administrator user properties',...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/SuspiciousModificationofGlobalAdminProperties.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 62, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 62, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 62, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global A...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12465d410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global A...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='48602a24-67cf-4362-b258-3f4249e55def', name='Suspicious modification of Global Administrator user properties',...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TimeSeriesAnomaly-MultiVendor_DataExfiltration.yaml]" time="0.010"><failure message="AssertionError: [{'end': 174, 'issue': 'VMConnection', 'message': &quot;The name 'VMConnection' does not refer to any known table, tabular ... &quot;The name 'VMConnection' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 174, 'issue': 'VMConnection', 'message': &quot;The name 'VMConnection' does not refer to any known table, tabular ... &quot;The name 'VMConnection' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 174, 'issue': 'VMConnection', 'message': &quot;The name 'VMConnection' does not refer to any known table, tabular ... &quot;The name 'VMConnection' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size t...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f0eed0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size t...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size transferred to public internet'...name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/TimeSeriesAnomaly-MultiVendor_DataExfiltration.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 174, 'issue': 'VMConnection', 'message': "The name 'VMConnection' does not refer to any known table, tabular ... "The name 'VMConnection' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 174, 'issue': 'VMConnection', 'message': "The name 'VMConnection' does not refer to any known table, tabular ... "The name 'VMConnection' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 174, 'issue': 'VMConnection', 'message': "The name 'VMConnection' does not refer to any known table, tabular ... "The name 'VMConnection' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size t...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f0eed0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size t...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='f2dd4a3a-ebac-4994-9499-1a859938c947', name='Time series anomaly for data size transferred to public internet'...name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EuropiumUnusualIdentity.yaml]" time="0.003"><failure message="AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exc...Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e678d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exc...Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt; = KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exchange powershell', description... Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/EuropiumUnusualIdentity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exc...Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e678d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exc...Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt; = KQL(id='0a3f4f4f-46ad-4562-acd6-f17730a5aef4', name='Unusual identity creation using exchange powershell', description... Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeWorkerProcessMakingRemoteCall.yaml]" time="0.002"><failure message="AssertionError: [{'end': 209, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 209, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 209, 'issue': 'W3CIISLog', 'message': &quot;The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remo...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f0e410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remo...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt; = KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remote Call', description=&quot;'This q...nity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ExchangeWorkerProcessMakingRemoteCall.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 209, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 209, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 209, 'issue': 'W3CIISLog', 'message': "The name 'W3CIISLog' does not refer to any known table, tabular variab...ame 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remo...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f0e410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remo...ity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}})&gt; = KQL(id='2c701f94-783c-4cd4-bc9b-3b3334976090', name='Exchange Worker Process Making Remote Call', description="'This q...nity'}, 'author': {'name': 'petebryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Application']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardOct292020IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/ForestBlizzardOct292020IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Accountcreatedfromnon-approvedsources.yaml]" time="0.005"><failure message="AssertionError: [{'end': 30, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 30, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 30, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved s...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e9cc10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved s...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved sources', description=&quot;'This qu...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/MultipleDataSources/Accountcreatedfromnon-approvedsources.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 30, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 30, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 30, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved s...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e9cc10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved s...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='99d589fa-7337-40d7-91a0-c96d0c4fa437', name='Account created from non-approved sources', description="'This qu...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PossibleDGAContacts.yaml]" time="0.005"><failure message="AssertionError: [{'end': 932, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 932, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 932, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Doma...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6f10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Doma...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Domain Generation Algorithm (DGA) ...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PossibleDGAContacts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 932, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 932, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 932, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known table, tabu...The name '_Im_WebSession' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Doma...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6f10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Doma...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='9176b18f-a946-42c6-a2f6-0f6d17cd6a8a', name='Potential communication with a Domain Generation Algorithm (DGA) ...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/DiscordCDNRiskyFileDownload_ASim.yaml]" time="0.003"><failure message="AssertionError: [{'end': 85, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 85, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 85, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (A...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef4650&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (A...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (ASIM Web Session Schema)', desc...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/DiscordCDNRiskyFileDownload_ASim.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 85, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 85, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 85, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (A...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef4650&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (A...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='01e8ffff-dc0c-43fe-aa22-d459c4204553', name='Discord CDN Risky File Download  (ASIM Web Session Schema)', desc...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PotentiallyHarmfulFileTypes.yaml]" time="0.005"><failure message="AssertionError: [{'end': 128, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...]&#10;assert 10 == 0&#10; +  where 10 = len([{'end': 128, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...])&#10; +    where [{'end': 128, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a po...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e75710&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a po...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a potentially harmful file (ASIM W...ty'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/PotentiallyHarmfulFileTypes.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 128, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...]
E           assert 10 == 0
E            +  where 10 = len([{'end': 128, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...])
E            +    where [{'end': 128, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...sion', 'severity': 'Error', ...}, {'end': 548, 'issue': '\\', 'message': 'Expected: )', 'severity': 'Error', ...}, ...] = &lt;bound method KQL.validate of KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a po...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e75710&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a po...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='09c49590-4e9d-4da9-a34d-17222d0c9e7e', name='A client made a web request to a potentially harmful file (ASIM W...ty'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUACryptoMiners.yaml]" time="0.003"><failure message="AssertionError: [{'end': 490, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 490, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 490, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a cry...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef5c50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a cry...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a crypto miner (ASIM Web Session sc...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUACryptoMiners.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 490, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 490, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 490, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a cry...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef5c50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a cry...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='8cbc3215-fa58-4bd6-aaaa-f0029c351730', name='A host is potentially running a crypto miner (ASIM Web Session sc...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/ExcessiveNetworkFailuresFromSource.yaml]" time="0.003"><failure message="AssertionError: [{'end': 48, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 48, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 48, 'issue': '_Im_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentica...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125965cd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentica...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentication failures from a source (A...ty'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/ExcessiveNetworkFailuresFromSource.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 48, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 48, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 48, 'issue': '_Im_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentica...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125965cd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentica...y'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a1bddaf8-982b-4089-ba9e-6590dfcf80ea', name='Excessive number of HTTP authentication failures from a source (A...ty'}, 'author': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAHackTool.yaml]" time="0.003"><failure message="AssertionError: [{'end': 491, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 491, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 491, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hac...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee3390&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hac...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hacking tool (ASIM Web Session sc...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAHackTool.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 491, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 491, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 491, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hac...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee3390&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hac...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='3f0c20d5-6228-48ef-92f3-9ff7822c1954', name='A host is potentially running a hacking tool (ASIM Web Session sc...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAPowershell.yaml]" time="0.003"><failure message="AssertionError: [{'end': 488, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 488, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 488, 'issue': '_GetWatchlist', 'message': &quot;The name '_GetWatchlist' does not refer to any known function.&quot;, '...m_WebSession', 'message': &quot;The name '_Im_WebSession' does not refer to any known function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running Power...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e10890&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running Power...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running PowerShell to send HTTP(S) requests...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimWebSession/UnusualUAPowershell.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 488, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 488, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}])
E            +    where [{'end': 488, 'issue': '_GetWatchlist', 'message': "The name '_GetWatchlist' does not refer to any known function.", '...m_WebSession', 'message': "The name '_Im_WebSession' does not refer to any known function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running Power...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e10890&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running Power...r': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='42436753-9944-4d70-801c-daaa4d19ddd2', name='A host is potentially running PowerShell to send HTTP(S) requests...or': {'name': 'Yaron'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppCertDLLModification.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppCertDLLModification.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthMonAgentRegKeyAccess.yaml]" time="0.005"><failure message="AssertionError: [{'end': 794, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 794, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 794, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Re...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1ecd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Re...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Registry Keys Access', descripti... 'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthMonAgentRegKeyAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 794, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 794, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 794, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Re...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1ecd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Re...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='f819c592-c5f9-4d5c-a79f-1e6819863533', name='Azure AD Health Monitoring Agent Registry Keys Access', descripti... 'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/powershell_empire.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/powershell_empire.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingToolsFileArtifacts.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingToolsFileArtifacts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/Potentialre-namedsdeleteusage.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/Potentialre-namedsdeleteusage.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialBuildProcessCompromise.yaml]" time="0.005"><failure message="AssertionError: [{'end': 483, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 483, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 483, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise'...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1f210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise'...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise', description=&quot;'The query look... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialBuildProcessCompromise.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 483, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 483, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 483, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise'...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1f210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise'...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='5ef06767-b37c-4818-b035-47de950d0046', name='Potential Build Process Compromise', description="'The query look... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SolorigateNamedPipe.yaml]" time="0.003"><failure message="AssertionError: [{'end': 26, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fun... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 26, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fun... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 26, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fun... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a2b350&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description=&quot;'Identifies a match across v...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SolorigateNamedPipe.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 26, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fun... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 26, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fun... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 26, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fun... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a2b350&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='11b4c19d-2a79-4da3-af38-b067e1273dee', name='Solorigate Named Pipe', description="'Identifies a match across v...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/FakeComputerAccountCreated.yaml]" time="0.002"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', des...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1f450&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', des...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', description=&quot;'This query detects ...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/FakeComputerAccountCreated.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', des...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1f450&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', des...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='c1faf5e8-6958-11ec-90d6-0242ac120003', name='Fake computer account created', description="'This query detects ...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteAuthSyncConnection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteAuthSyncConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AccessibilityFeaturesModification.yaml]" time="0.003"><failure message="AssertionError: [{'end': 323, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 323, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 323, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Featu...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef4410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Featu...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Features', description='\'Adversari...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AccessibilityFeaturesModification.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 323, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 323, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 323, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Featu...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef4410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Featu...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='d714ef62-1a56-4779-804f-91c4158e528d', name='Modification of Accessibility Features', description='\'Adversari...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LocalDeviceJoinInfoAndTransportKeyRegKeysAccess.yaml]" time="0.001"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LocalDeviceJoinInfoAndTransportKeyRegKeysAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MacroInvokingShellBrowserWindowCOMObjects.yaml]" time="0.001"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MacroInvokingShellBrowserWindowCOMObjects.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_never_expires.yaml]" time="0.005"><failure message="AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name=&quot;AD account with Don't Expire Passwo...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f2b3d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name=&quot;AD account with Don't Expire Passwo...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name=&quot;AD account with Don't Expire Password&quot;, description='\'Identifies...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_never_expires.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name="AD account with Don't Expire Passwo...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f2b3d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name="AD account with Don't Expire Passwo...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='6c360107-f3ee-4b91-9f43-f4cfd90441cf', name="AD account with Don't Expire Password", description='\'Identifies...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotenialResourceBasedConstrainedDelegationAbuse.yaml]" time="0.002"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee0850&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained Delegation Abuse', descriptio...sileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotenialResourceBasedConstrainedDelegationAbuse.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee0850&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='2937bc6b-7cda-4fba-b452-ea43ba8e835f', name='Possible Resource-Based Constrained Delegation Abuse', descriptio...sileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppInt_DLLsModification.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RegistryPersistenceViaAppInt_DLLsModification.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/malware_in_recyclebin.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/malware_in_recyclebin.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GroupCreatedAddedToPrivlegeGroup_1h.yaml]" time="0.005"><failure message="AssertionError: [{'end': 319, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 319, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 319, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built i...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6f10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built i...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built in domain local or global group...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GroupCreatedAddedToPrivlegeGroup_1h.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 319, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 319, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 319, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built i...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6f10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built i...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a7564d76-ec6b-4519-a66b-fcc80c42332b', name='Group created then added to built in domain local or global group...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_base64_encoded_pefile.yaml]" time="0.001"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_base64_encoded_pefile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialKerberoast.yaml]" time="0.005"><failure message="AssertionError: [{'end': 140, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 140, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 140, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e76410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', description=&quot;'A service principal name ...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialKerberoast.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 140, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 140, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 140, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e76410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1572e66b-20a7-4012-9ec4-77ec4b101bc8', name='Potential Kerberoasting', description="'A service principal name ...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialRemoteDesktopTunneling.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialRemoteDesktopTunneling.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DSRMAccountAbuse.yaml]" time="0.002"><failure message="AssertionError: [{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description=&quot;'...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e9a9d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description=&quot;'...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description=&quot;'This query detects an abuse of...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DSRMAccountAbuse.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description="'...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e9a9d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description="'...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='979c42dd-533e-4ede-b18b-31a84ba8b3d6', name='DSRM Account Abuse', description="'This query detects an abuse of...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteHTTPNetworkConnection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSRemoteHTTPNetworkConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserCreatedAddedToBuiltinAdmins_1d.yaml]" time="0.005"><failure message="AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the b...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1e250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the b...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the built-in administrators group',...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserCreatedAddedToBuiltinAdmins_1d.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 34, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the b...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1e250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the b...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='aa1eff90-29d4-49dc-a3ea-b65199f516db', name='New user created and added to the built-in administrators group',...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSAbnormalEnhancedKeyUsageAttribute-OID.yaml]" time="0.002"><failure message="AssertionError: [{'end': 215, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 215, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 215, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifie...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee03d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifie...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifier attribute', description='\'T...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSAbnormalEnhancedKeyUsageAttribute-OID.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 215, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 215, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 215, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifie...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee03d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifie...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='cfc1ae62-db63-4a3e-b88b-dc04030c2257', name='AD FS Abnormal EKU object identifier attribute', description='\'T...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthSvcAgentRegKeyAccess.yaml]" time="0.006"><failure message="AssertionError: [{'end': 793, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 793, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 793, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Regi...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f29c50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Regi...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Registry Keys Access', description... 'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AADHealthSvcAgentRegKeyAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 793, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 793, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 793, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Regi...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f29c50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Regi...'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='06bbf969-fcbe-43fa-bac2-b2fa131d113a', name='Azure AD Health Service Agents Registry Keys Access', description... 'Roberto Rodriguez'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountCreatedDeleted_10m.yaml]" time="0.016"><failure message="AssertionError: [{'end': 97, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 97, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 97, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted wi...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667cd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted wi...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted within 10 mins', description=&quot;'I...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountCreatedDeleted_10m.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 97, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 97, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 97, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted wi...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667cd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted wi...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='4b93c5af-d20b-4236-b696-a28b8c51407f', name='User account created and deleted within 10 mins', description="'I...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonNewUMServiceChildProcess.yaml]" time="0.007"><failure message="AssertionError: [{'end': 74, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 74, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 74, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child P...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6690&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child P...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child Process', description=&quot;'This qu...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonNewUMServiceChildProcess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 74, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 74, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 74, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child P...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ef6690&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child P...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='95a15f39-d9cc-4667-8cdd-58f3113691c9', name='Silk Typhoon New UM Service Child Process', description="'This qu...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAddedToPrivlegeGroup_1h.yaml]" time="0.004"><failure message="AssertionError: [{'end': 433, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 433, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 433, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in doma...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124665210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in doma...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in domain local or global group', des...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAddedToPrivlegeGroup_1h.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 433, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 433, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 433, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in doma...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124665210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in doma...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a35f2c18-1b97-458f-ad26-e033af18eb99', name='User account added to built in domain local or global group', des...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/base64_encoded_pefile.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/base64_encoded_pefile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_not_set.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/password_not_set.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SdeletedeployedviaGPOandrunrecursively.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SdeletedeployedviaGPOandrunrecursively.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/gte_6_FailedLogons_10m.yaml]" time="0.008"><failure message="AssertionError: [{'end': 1709, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabul... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 1709, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabul... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 1709, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabul... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid acco...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124671690&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid acco...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid accounts within 10 mins', descript...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/gte_6_FailedLogons_10m.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 1709, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabul... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 1709, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabul... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 1709, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabul... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid acco...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124671690&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid acco...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0777f138-e5d8-4eab-bec1-e11ddfbc2be2', name='Failed logon attempts by valid accounts within 10 mins', descript...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_MultipleConnectionsFromSingleSystem.yaml]" time="0.004"><failure message="AssertionError: [{'end': 93, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 93, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 93, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Singl...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f379d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Singl...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Single System', description=&quot;'Ident...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_MultipleConnectionsFromSingleSystem.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 93, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 93, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 93, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Singl...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f379d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Singl...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='78422ef2-62bf-48ca-9bab-72c69818a425', name='Multiple RDP connections from Single System', description="'Ident...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/TimeSeriesAnomaly-ProcessExecutions.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/TimeSeriesAnomaly-ProcessExecutions.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesExecutedfromNon-DefaultDirectory.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesExecutedfromNon-DefaultDirectory.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonSuspiciousUMServiceError.yaml]" time="0.002"><failure message="AssertionError: [{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 5, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service ...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee1310&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service ...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service Error', description=&quot;'This que...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SilkTyphoonSuspiciousUMServiceError.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 5, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service ...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee1310&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service ...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='0625fcce-6d52-491e-8c68-1d9b801d25b9', name='Silk Typhoon Suspicious UM Service Error', description="'This que...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AdminSDHolder_Modifications.yaml]" time="0.002"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', descr...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667f90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', descr...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', description=&quot;'This query detects mo...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/AdminSDHolder_Modifications.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', descr...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667f90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', descr...'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='52aec824-96c1-4a03-8e44-bb70532e6cea', name='AdminSDHolder Modifications', description="'This query detects mo...{'name': 'Vasileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousRundll32Exec.yaml]" time="0.003"><failure message="AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rund...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f28510&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rund...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rundll32.exe execution of vbscript...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousRundll32Exec.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rund...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f28510&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rund...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='d82e1987-4356-4a7b-bc5e-064f29b143c0', name='Midnight Blizzard - suspicious rundll32.exe execution of vbscript...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_Nesting.yaml]" time="0.005"><failure message="AssertionError: [{'end': 254, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 6 == 0&#10; +  where 6 = len([{'end': 254, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 254, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description=&quot;'Identif...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246715d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description=&quot;'Identif...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description=&quot;'Identifies when an RDP connection is ...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_Nesting.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 254, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 6 == 0
E            +  where 6 = len([{'end': 254, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 254, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description="'Identif...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246715d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description="'Identif...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='69a45b05-71f5-45ca-8944-2e038747fb39', name='RDP Nesting', description="'Identifies when an RDP connection is ...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/execute_base64_decodedpayload.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/execute_base64_decodedpayload.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DumpingLSASSProcessIntoaFile.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/DumpingLSASSProcessIntoaFile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExchangeOABVirtualDirectoryAttributeContainingPotentialWebshell.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExchangeOABVirtualDirectoryAttributeContainingPotentialWebshell.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingServiceInstallation.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/CredentialDumpingServiceInstallation.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserPrincipalNameAssignedToUserAccount.yaml]" time="0.003"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assign...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65290&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assign...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assigned to User Account', descripti...sileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserPrincipalNameAssignedToUserAccount.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assign...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65290&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assign...ileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='875d0eb1-883a-4191-bd0e-dbfdeb95a464', name='Service Principal Name (SPN) Assigned to User Account', descripti...sileios Paschalidis'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MultipleFailedFollowedBySuccess.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MultipleFailedFollowedBySuccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/COMEventSystemLoadingNewDLL.yaml]" time="0.005"><failure message="AssertionError: [{'end': 142, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 142, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 142, 'issue': 'Event', 'message': &quot;The name 'Event' does not refer to any known table, tabular variable or fu...ssage': &quot;The name 'Event' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', ...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f5f950&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', ...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', description=&quot;'This query uses ...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/COMEventSystemLoadingNewDLL.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 142, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 142, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 142, 'issue': 'Event', 'message': "The name 'Event' does not refer to any known table, tabular variable or fu...ssage': "The name 'Event' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', ...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f5f950&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', ...y'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='02f6c2e5-219d-4426-a0bf-ad67abc63d53', name='COM Event System Loading New DLL', description="'This query uses ...ty'}, 'author': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesLolbinsRenamed.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WindowsBinariesLolbinsRenamed.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSDBNamedPipeConnection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ADFSDBNamedPipeConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LateralMovementViaDCOM.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/LateralMovementViaDCOM.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousScriptRegistryWrite.yaml]" time="0.003"><failure message="AssertionError: [{'end': 223, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 223, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 223, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f52410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload stored in Registry', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/MidnightBlizzard_SuspiciousScriptRegistryWrite.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 223, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 223, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 223, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f52410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload ...: {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='00cb180c-08a8-4e55-a276-63fb1442d5b5', name='Midnight Blizzard - Script payload stored in Registry', descripti...': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_SecurityEventLogCleared.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_SecurityEventLogCleared.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAdd-Removed.yaml]" time="0.005"><failure message="AssertionError: [{'end': 309, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 309, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 309, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabula... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from priv...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124673fd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from priv...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from privileged groups', description=&quot;'...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountAdd-Removed.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 309, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 309, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 309, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabula... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from priv...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124673fd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from priv...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='7efc75ce-e2a4-400f-a8b1-283d3b0f2c60', name='Account added and removed from privileged groups', description="'...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ScheduleTaskHide.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ScheduleTaskHide.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GainCodeExecutionADFSViaSMB.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/GainCodeExecutionADFSViaSMB.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WDigestDowngradeAttack.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/WDigestDowngradeAttack.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_execute_base64_decodedpayload.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NRT_execute_base64_decodedpayload.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialFodhelperUACBypass.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/PotentialFodhelperUACBypass.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_RareConnection.yaml]" time="0.004"><failure message="AssertionError: [{'end': 73, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 73, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 73, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description=...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f55b10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description=...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description=&quot;'Identifies when an RDP conne...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/RDP_RareConnection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 73, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 73, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 73, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description=...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f55b10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description=...r': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='45b903c5-6f56-4969-af10-ae62ac709718', name='Rare RDP Connections', description="'Identifies when an RDP conne...or': {'name': 'Shain'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/StartStopHealthService.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/StartStopHealthService.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SecurityEventLogCleared.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/SecurityEventLogCleared.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountEnabledDisabled_10m.yaml]" time="0.005"><failure message="AssertionError: [{'end': 95, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 95, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 95, 'issue': 'SecurityEvent', 'message': &quot;The name 'SecurityEvent' does not refer to any known table, tabular... &quot;The name 'WindowsEvent' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled w...'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1e3d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled w...'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled within 10 mins', description=&quot;'...{'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/UserAccountEnabledDisabled_10m.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 95, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 95, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 95, 'issue': 'SecurityEvent', 'message': "The name 'SecurityEvent' does not refer to any known table, tabular... "The name 'WindowsEvent' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled w...'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f1e3d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled w...'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='3d023f64-8225-41a2-9570-2bd7c2c4535e', name='User account enabled and disabled within 10 mins', description="'...{'name': 'Samik Roy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExcessiveLogonFailures.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/ExcessiveLogonFailures.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NonDCActiveDirectoryReplication.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityEvent/NonDCActiveDirectoryReplication.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/QualysVMV2/HighNumberofVulnDetectedV2.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVMV2/HighNumberofVulnDetectedV2.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/QualysVMV2/NewHighSeverityVulnDetectedAcrossMulitpleHostsV2.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVMV2/NewHighSeverityVulnDetectedAcrossMulitpleHostsV2.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceEvents/SolarWinds_TEARDROP_Process-IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceEvents/SolarWinds_TEARDROP_Process-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DnsEvents/NRT_DNS_Related_To_Mining_Pools.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/NRT_DNS_Related_To_Mining_Pools.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighNXDomainCount_detection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighNXDomainCount_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_Miners.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_Miners.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_TorProxies.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_TorProxies.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighReverseDNSCount_detection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DnsEvents/DNS_HighReverseDNSCount_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PrivlegedRoleAssignedOutsidePIM.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PrivlegedRoleAssignedOutsidePIM.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/End-userconsentstoppedduetorisk-basedconsent.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to ris...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65010&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to ris...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to risk-based consent', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/End-userconsentstoppedduetorisk-basedconsent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to ris...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65010&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to ris...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='009b9bae-23dd-43c4-bcb9-11c4ba7c784a', name='End-user consent stopped due to risk-based consent', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAddedtoAdminRole.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', descript..., Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8d990&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', descript..., Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', description=&quot;'Detects a user being add...n, Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAddedtoAdminRole.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', descript..., Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8d990&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', descript..., Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='2a09f8cb-deb7-4c40-b08b-9137667f1c0b', name='User Added to Admin Role', description="'Detects a user being add...n, Wojciech Lesicki'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/RareApplicationConsent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/RareApplicationConsent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationIDURIChanged.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', descri...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8e190&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', descri...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', description=&quot;'Detects changes to an ... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationIDURIChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', descri...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8e190&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', descri...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='9fb2ee72-959f-4c2b-bc38-483affc539e4', name='Application ID URI Changed', description="'Detects changes to an ... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_PwnAuth.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_PwnAuth.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/URLAddedtoApplicationfromUnknownDomain.yaml]" time="0.004"><failure message="AssertionError: [{'end': 26, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 26, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 26, 'issue': 'SigninLogs', 'message': &quot;The name 'SigninLogs' does not refer to any known table, tabular varia...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unkno...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e73c90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unkno...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unknown Domain', description=&quot;'Dete... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/URLAddedtoApplicationfromUnknownDomain.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 26, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 26, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 26, 'issue': 'SigninLogs', 'message': "The name 'SigninLogs' does not refer to any known table, tabular varia...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unkno...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e73c90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unkno...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='017e095a-94d8-430c-a047-e51a11fb737b', name='URL Added to Application from Unknown Domain', description="'Dete... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdditionofaTemporaryAccessPasstoaPrivilegedAccount.yaml]" time="0.002"><failure message="AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass...e Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f93210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass...e Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt; = KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass to a Privileged Account', des...te Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdditionofaTemporaryAccessPasstoaPrivilegedAccount.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass...e Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f93210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass...e Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}})&gt; = KQL(id='d7feb859-f03e-4e8d-8b21-617be0213b13', name='Addition of a Temporary Access Pass to a Privileged Account', des...te Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_UseraddedtoPrivilgedGroups.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_UseraddedtoPrivilgedGroups.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_AuthenticationMethodsChangedforVIPUsers.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_AuthenticationMethodsChangedforVIPUsers.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedAppRoleWithSensitiveAccess.yaml]" time="0.003"><failure message="AssertionError: [{'end': 271, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 5 == 0&#10; +  where 5 = len([{'end': 271, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 271, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125faaad0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role With Sensitive Access', descr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedAppRoleWithSensitiveAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 271, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 5 == 0
E            +  where 5 = len([{'end': 271, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 271, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125faaad0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='dd78a122-d377-415a-afe9-f22e08d2112c', name='Service Principal Assigned App Role With Sensitive Access', descr...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundDirectSettingsChanged.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundDirectSettingsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ConditionalAccessPolicyModifiedbyNewUser.yaml]" time="0.003"><failure message="AssertionError: [{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125faac90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified by New User', description=&quot;'De... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ConditionalAccessPolicyModifiedbyNewUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125faac90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='25a7f951-54b7-4cf5-9862-ebc04306c590', name='Conditional Access Policy Modified by New User', description="'De... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/FirstAppOrServicePrincipalCredential.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/FirstAppOrServicePrincipalCredential.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AuthenticationMethodChangedforPrivilegedAccount.yaml]" time="0.009"><failure message="AssertionError: [{'end': 28, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 28, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 28, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for P...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124690d10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for P...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for Privileged Account', descriptio... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AuthenticationMethodChangedforPrivilegedAccount.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 28, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 28, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 28, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for P...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124690d10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for P...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='feb0a2fb-ae75-4343-8cbc-ed545f1da289', name='Authentication Method Changed for Privileged Account', descriptio... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousLinkingofExternalIdtoExistingUsers.yaml]" time="0.016"><failure message="AssertionError: [{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 28, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12465f590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user to external User', descriptio...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousLinkingofExternalIdtoExistingUsers.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 28, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12465f590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user...me': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='22a320c2-e1e5-4c74-a35b-39fc9cdcf859', name='Suspicious linking of existing user to external User', descriptio...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationLogoutURL.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL',...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f50f90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL',...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL', description=&quot;'Detects changes... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationLogoutURL.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL',...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f50f90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL',...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='492fbe35-cbac-4a8c-9059-826782e6915a', name='Changes to Application Logout URL', description="'Detects changes... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountElevatedtoNewRole.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', desc...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667a90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', desc...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', description=&quot;'Detects an account t...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountElevatedtoNewRole.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', desc...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124667a90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', desc...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='c1c66f0b-5531-4a3e-a619-9d2f770ef730', name='Account Elevated to New Role', description="'Detects an account t...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdminPromoAfterRoleMgmtAppPermissionGrant.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AdminPromoAfterRoleMgmtAppPermissionGrant.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationOwnership.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65310&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', description=&quot;'Detects changes ... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoApplicationOwnership.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f65310&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', ...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='cc5780ce-3245-4bba-8bc1-e9048c2257ce', name='Changes to Application Ownership', description="'Detects changes ... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_O365AttackToolkit.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MaliciousOAuthApp_O365AttackToolkit.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PIMElevationRequestRejected.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_PIMElevationRequestRejected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Useraccountcreatedwithoutexpectedattributesdefined.yaml]" time="0.005"><failure message="AssertionError: [{'end': 203, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 203, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 203, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variab...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expect...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f86a10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expect...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expected attributes defined', descri... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Useraccountcreatedwithoutexpectedattributesdefined.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 203, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 203, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 203, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variab...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expect...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f86a10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expect...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='dc99e38c-f4e9-4837-94d7-353ac0b01a77', name='User account created without expected attributes defined', descri... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/BulkChangestoPrivilegedAccountPermissions.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/BulkChangestoPrivilegedAccountPermissions.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationDeleted.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationDeleted.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedPrivilegedRole.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'newValue' does not refer to any known column, table, variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileg...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ebb290&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileg...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileged Role', description=&quot;'Detect...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ServicePrincipalAssignedPrivilegedRole.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable...ge': "The name 'newValue' does not refer to any known column, table, variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileg...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ebb290&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileg...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='84cccc86-5c11-4b3a-aca6-7c8f738ed0f7', name='Service Principal Assigned Privileged Role', description="'Detect...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousServicePrincipalcreationactivity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousServicePrincipalcreationactivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewAppOrServicePrincipalCredential.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewAppOrServicePrincipalCredential.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAccountCreatedUsingIncorrectNamingFormat.yaml]" time="0.002"><failure message="AssertionError: [{'end': 112, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 112, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 112, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrec...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124680ad0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrec...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrect Naming Format', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAccountCreatedUsingIncorrectNamingFormat.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 112, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 112, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 112, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrec...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124680ad0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrec...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='ee55dc85-d2da-48c1-a6c0-3eaee62a8d56', name='User Account Created Using Incorrect Naming Format', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewExtUserGrantedAdmin.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NewExtUserGrantedAdmin.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MultipleAdmin_membership_removals_from_NewAdmin.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MultipleAdmin_membership_removals_from_NewAdmin.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedandDeletedinShortTimeframe.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedandDeletedinShortTimeframe.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/nrt_FirstAppOrServicePrincipalCredential.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/nrt_FirstAppOrServicePrincipalCredential.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedDeletedByNonApprovedUser.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AccountCreatedDeletedByNonApprovedUser.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationRedirectURLUpdate.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f64090&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', description=&quot;'Detects the redir... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ApplicationRedirectURLUpdate.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f64090&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='a1080fc1-13d1-479b-8340-255f0290d96c', name='Application Redirect URL Update', description="'Detects the redir... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ADFSDomainTrustMods.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ADFSDomainTrustMods.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundDirectSettingsChanged.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundDirectSettingsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoPIMSettings.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', descripti...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f91790&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', descripti...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', description=&quot;'PIM provides a key mechan...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/ChangestoPIMSettings.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', descripti...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f91790&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', descripti...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0ed0fe7c-af29-4990-af7f-bb5ccb231198', name='Changes to PIM Settings', description="'PIM provides a key mechan...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousOAuthApp_OfflineAccess.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/SuspiciousOAuthApp_OfflineAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestUsersInvitedtoTenantbyNewInviters.yaml]" time="0.003"><failure message="AssertionError: [{'end': 31, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 31, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 31, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variabl...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by Ne...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e28790&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by Ne...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by New Inviters', description=&quot;'Det...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestUsersInvitedtoTenantbyNewInviters.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 31, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 31, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 31, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variabl...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by Ne...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e28790&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by Ne...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='572e75ef-5147-49d9-9d65-13f2ed1e3a86', name='Guest Users Invited to Tenant by New Inviters', description="'Det...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_NewAppOrServicePrincipalCredential.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_NewAppOrServicePrincipalCredential.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/CredentialAddedAfterAdminConsent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/CredentialAddedAfterAdminConsent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UseraddedtoPrivilgedGroups.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UseraddedtoPrivilgedGroups.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivilegedAccountPermissionsChanged.yaml]" time="0.003"><failure message="AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': &quot;The name 'IdentityInfo' does not refer to any known table, tabular v...e': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Chan...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fbe0d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Chan...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Changed', description=&quot;'Detects ch...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivilegedAccountPermissionsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 31, 'issue': 'IdentityInfo', 'message': "The name 'IdentityInfo' does not refer to any known table, tabular v...e': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Chan...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fbe0d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Chan...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='0433c8a3-9aa6-4577-beef-2ea23be41137', name='Privileged Account Permissions Changed', description="'Detects ch...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/AzureADRoleManagementPermissionGrant.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/AzureADRoleManagementPermissionGrant.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserStatechangedfromGuesttoMember.yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Me...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee1f50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Me...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Member', description=&quot;'Detects w...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserStatechangedfromGuesttoMember.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Me...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee1f50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Me...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a09a0b8e-30fe-4ebf-94a0-cffe50f579cd', name='User State changed from Guest to Member', description="'Detects w...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundCollaborationSettingsChanged.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationOutboundCollaborationSettingsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestAccountsAddedinAADGroupsOtherThanTheOnesSpecified.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/GuestAccountsAddedinAADGroupsOtherThanTheOnesSpecified.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_ADFSDomainTrustMods.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/NRT_ADFSDomainTrustMods.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/MailPermissionsAddedToApplication.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/MailPermissionsAddedToApplication.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationAdded.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationAdded.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PIMElevationRequestRejected.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/PIMElevationRequestRejected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivlegedRoleAssignedOutsidePIM.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/PrivlegedRoleAssignedOutsidePIM.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundCollaborationSettingsChanged.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/Cross-tenantAccessSettingsOrganizationInboundCollaborationSettingsChanged.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAssignedPrivilegedRole.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AuditLogs/UserAssignedPrivilegedRole.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/QualysVM/NewHighSeverityVulnDetectedAcrossMulitpleHosts.yaml]" time="0.002"><failure message="AssertionError: [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Det...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a5110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Det...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Detected Across Multiple Hosts', ...'name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVM/NewHighSeverityVulnDetectedAcrossMulitpleHosts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Det...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a5110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Det...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='84cf1d59-f620-4fee-b569-68daf7008b7b', name='New High Severity Vulnerability Detected Across Multiple Hosts', ...'name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/QualysVM/HighNumberofVulnDetected.yaml]" time="0.002"><failure message="AssertionError: [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': &quot;The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabiliti...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc10d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabiliti...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabilities Detected', description=&quot;'Th...'name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/QualysVM/HighNumberofVulnDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 42, 'issue': 'QualysHostDetection_CL', 'message': "The name 'QualysHostDetection_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabiliti...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc10d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabiliti...name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='be52662c-3b23-435a-a6fa-f39bdfc849e6', name='High Number of Urgent Vulnerabilities Detected', description="'Th...'name': 'chicduong'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Heartbeat/OMI_vulnerability_detection.yaml]" time="0.002"><failure message="AssertionError: [{'end': 86, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 86, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 86, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', de...Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a43590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', de...Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}})&gt; = KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', description='Following the Septe...'Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Heartbeat/OMI_vulnerability_detection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 86, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 86, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 86, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', de...Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a43590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', de...Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}})&gt; = KQL(id='3cc5ccd8-b416-4141-bb2d-4eba370e37a5', name='OMI Vulnerability Exploitation', description='Following the Septe...'Ron Marsiano'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Vulnerability Management']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/Heartbeat/MissingDCHearbeat.yaml]" time="0.002"><failure message="AssertionError: [{'end': 327, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 327, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 327, 'issue': 'Heartbeat', 'message': &quot;The name 'Heartbeat' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat...anos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e00fd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat...anos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat', description=&quot;'This detectio...Canos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/Heartbeat/MissingDCHearbeat.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 327, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 327, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 327, 'issue': 'Heartbeat', 'message': "The name 'Heartbeat' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat...anos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e00fd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat...anos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='b8b8ba09-1e89-45a1-8bd7-691cd23bfa32', name='Missing Domain Controller Heartbeat', description="'This detectio...Canos'}, 'support': {'tier': 'Community'}, 'providers': 'Microsoft', 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-SQLiDetection.yaml]" time="0.003"><failure message="AssertionError: [{'end': 35, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 35, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Dete...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a51c10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Dete...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Detection', description=&quot;'Identifi...z-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-SQLiDetection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 35, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Dete...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a51c10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Dete...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='68c0b6bb-6bd9-4ef4-9011-08998c8ef90f', name='Application Gateway WAF - SQLi Detection', description="'Identifi...z-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-XSSDetection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-XSSDetection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-SQLiDetection.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AFD-Premium-WAF-SQLiDetection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-XSSDetection.yaml]" time="0.003"><failure message="AssertionError: [{'end': 38, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 38, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 38, 'issue': 'AzureDiagnostics', 'message': &quot;The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detec...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f66810&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detec...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detection', description=&quot;'Identifie...z-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/AzureWAF/AppGwWAF-XSSDetection.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 38, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 38, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 38, 'issue': 'AzureDiagnostics', 'message': "The name 'AzureDiagnostics' does not refer to any known table, t...e name 'AzureDiagnostics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detec...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f66810&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detec...-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='d2bc08fa-030a-4eea-931a-762d27c6a042', name='Application Gateway WAF - XSS Detection', description="'Identifie...z-github'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/GitHub/Threat Intel Matches to GitHub Audit Logs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/Threat Intel Matches to GitHub Audit Logs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/GitHub/NRT Two Factor Authentication Disabled.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/NRT Two Factor Authentication Disabled.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/GitHub/Security Vulnerability in Repo.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/GitHub/Security Vulnerability in Repo.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceNetworkEvents/SolarWinds_SUNBURST_Network-IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceNetworkEvents/SolarWinds_SUNBURST_Network-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/SolarWinds_SUNBURST_&amp;_SUPERNOVA_File-IOCs.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/SolarWinds_SUNBURST_&amp;_SUPERNOVA_File-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/PEfiledroppedinColorDriversFolder.yaml]" time="0.002"><failure message="AssertionError: [{'end': 16, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 16, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 16, 'issue': 'DeviceFileEvents', 'message': &quot;The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Fo...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8d510&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Fo...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Folder', description=&quot;'This quer... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceFileEvents/PEfiledroppedinColorDriversFolder.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 16, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 16, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 16, 'issue': 'DeviceFileEvents', 'message': "The name 'DeviceFileEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Fo...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f8d510&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Fo...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='f68a5046-b7eb-4f69-9519-1e99708bb9e0', name='PE file dropped in Color Profile Folder', description="'This quer... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRareUserAgentDetected.yaml]" time="0.002"><failure message="AssertionError: [{'end': 77, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 77, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 77, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent De...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e17fd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent De...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent Detected', description=&quot;'Rule he... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRareUserAgentDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 77, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 77, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 77, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent De...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e17fd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent De...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='8c8de3fa-6425-4623-9cd9-45de1dd0569a', name='Cisco Umbrella - Rare User Agent Detected', description="'Rule he... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionToUnpopularWebsiteDetected.yaml]" time="0.002"><failure message="AssertionError: [{'end': 83, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 83, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 83, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpo...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc0590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpo...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpopular Website Detected', descr... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionToUnpopularWebsiteDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 83, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 83, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 83, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabul...The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpo...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc0590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpo...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='75297f62-10a8-4fc1-9b2a-12f25c6f05a7', name='Cisco Umbrella - Connection to Unpopular Website Detected', descr... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestAllowedHarmfulMaliciousURICategory.yaml]" time="0.002"><failure message="AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f92c90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to harmful/malicious URI categor...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestAllowedHarmfulMaliciousURICategory.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125f92c90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='d6bf1931-b1eb-448d-90b2-de118559c7ce', name='Cisco Umbrella - Request Allowed to harmful/malicious URI categor...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaCryptoMinerUserAgentDetected.yaml]" time="0.001"><failure message="AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a1e450&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-Agent Detected', description=&quot;... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaCryptoMinerUserAgentDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125a1e450&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='b619d1f1-7f39-4c7e-bf9e-afbb46457997', name='Cisco Umbrella - Crypto Miner User-Agent Detected', description="... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionNon-CorporatePrivateNetwork.yaml]" time="0.002"><failure message="AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fb69d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-corporate private network', de...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaConnectionNon-CorporatePrivateNetwork.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fb69d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='c9b6d281-b96b-4763-b728-9a04b9fe1246', name='Cisco Umbrella - Connection to non-corporate private network', de...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaPowershellUserAgentDetected.yaml]" time="0.002"><failure message="AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a7fd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell User-Agent Detected', descrip... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaPowershellUserAgentDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a7fd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='b12b3dab-d973-45af-b07e-e29bb34d8db9', name='Cisco Umbrella - Windows PowerShell User-Agent Detected', descrip... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaURIContainsIPAddress.yaml]" time="0.002"><failure message="AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP ad...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fefd10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP ad...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP address', description=&quot;'Malware ...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.1.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaURIContainsIPAddress.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 32, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP ad...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fefd10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP ad...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None)&gt; = KQL(id='ee1818ec-5f65-4991-b711-bcf2ab7e36c3', name='Cisco Umbrella - URI contains IP address', description="'Malware ...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.1.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestBlocklistedFileType.yaml]" time="0.002"><failure message="AssertionError: [{'end': 100, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 100, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 100, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blockli...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc24d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blockli...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blocklisted file type', description=&quot;...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n&quot;, version='1.0.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaRequestBlocklistedFileType.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 100, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 100, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 100, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blockli...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc24d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blockli...tomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='de58ee9e-b229-4252-8537-41a4c2f4045e', name='Cisco Umbrella - Request to blocklisted file type', description="...stomEntity = SrcIpAddr\n| extend AccountCustomEntity = Identities\n", version='1.0.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaEmptyUserAgentDetected.yaml]" time="0.001"><failure message="AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent D...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff0f90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent D...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent Detected', description=&quot;'Rule h... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaEmptyUserAgentDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent D...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff0f90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent D...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='2b328487-162d-4034-b472-59f1d53684a1', name='Cisco Umbrella - Empty User Agent Detected', description="'Rule h... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaHackToolUserAgentDetected.yaml]" time="0.002"><failure message="AssertionError: [{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': &quot;The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Age...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff2cd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Age...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Agent Detected', description=&quot;'De... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CiscoUmbrella/CiscoUmbrellaHackToolUserAgentDetected.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 2029, 'issue': 'Cisco_Umbrella', 'message': "The name 'Cisco_Umbrella' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Age...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff2cd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Age...extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='8d537f3c-094f-430c-a588-8a87da36ee3a', name='Cisco Umbrella - Hack Tool User-Agent Detected', description="'De... extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_MailForwarding.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_MailForwarding.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewUserAgent.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewUserAgent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_Uploaded_Executables.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Office_Uploaded_Executables.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/office_policytampering.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/office_policytampering.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ForestBlizzardCredHarvesting.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ForestBlizzardCredHarvesting.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Office_MailForwarding.yaml]" time="0.002"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Office_MailForwarding.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewIP.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/SharePoint_Downloads_byNewIP.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/RareOfficeOperations.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/RareOfficeOperations.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MultipleTeamsDeletes.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MultipleTeamsDeletes.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Mail_redirect_via_ExO_transport_rule.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Mail_redirect_via_ExO_transport_rule.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/External User added to Team and immediately uploads file.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/External User added to Team and immediately uploads file.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Malicious_Inbox_Rule.yaml]" time="0.002"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/NRT_Malicious_Inbox_Rule.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Malicious_Inbox_Rule.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/Malicious_Inbox_Rule.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/exchange_auditlogdisabled.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/exchange_auditlogdisabled.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ExternalUserAddedRemovedInTeams.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/ExternalUserAddedRemovedInTeams.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MailItemsAccessedTimeSeries.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/OfficeActivity/MailItemsAccessedTimeSeries.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/AdFind_Usage.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/AdFind_Usage.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/SolarWinds_SUNBURST_Process-IOCs.yaml]" time="0.002"><failure message="AssertionError: [{'end': 433, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 433, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 433, 'issue': 'DeviceProcessEvents', 'message': &quot;The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds chil...  AlgorithmCustomEntity = &quot;MD5&quot;,\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127005250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds chil...  AlgorithmCustomEntity = &quot;MD5&quot;,\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None)&gt; = KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds child processes', description='Ide...   AlgorithmCustomEntity = &quot;MD5&quot;,\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/DeviceProcessEvents/SolarWinds_SUNBURST_Process-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 433, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 433, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 433, 'issue': 'DeviceProcessEvents', 'message': "The name 'DeviceProcessEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds chil...  AlgorithmCustomEntity = "MD5",\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127005250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds chil...  AlgorithmCustomEntity = "MD5",\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None)&gt; = KQL(id='4a3073ac-7383-48a9-90a8-eb6716183a54', name='SUNBURST suspicious SolarWinds child processes', description='Ide...   AlgorithmCustomEntity = "MD5",\n    FileHashCustomEntity = MD5\n', version='1.0.2', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/OMIGODVulnerableMachines.yaml]" time="0.002"><failure message="AssertionError: [{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': &quot;The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': &quot;The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': &quot;The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIG...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12702c650&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIG...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIGOD CVE-2021-38647', descriptio...ame': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/OMIGODVulnerableMachines.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': "The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': "The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 28, 'issue': 'SecurityNestedRecommendation', 'message': "The name 'SecurityNestedRecommendation' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIG...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12702c650&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIG...me': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='4d94d4a9-dc96-450a-9dea-4d4d4594199b', name='Vulnerable Machines related to OMIGOD CVE-2021-38647', descriptio...ame': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/Log4jVulnerableMachines.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityNestedRecommendation/Log4jVulnerableMachines.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_base64_encoded_pefile.yaml]" time="0.002"><failure message="AssertionError: [{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process comm...Utc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246cfe90&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process comm...Utc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process command-lines (Normalized Process ...eUtc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_base64_encoded_pefile.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process comm...Utc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246cfe90&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process comm...Utc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None)&gt; = KQL(id='f8b3c49c-4087-499b-920f-0dcfaff0cbca', name='Base64 encoded Windows process command-lines (Normalized Process ...eUtc, AccountCustomEntity = ActorUsername, HostCustomEntity = Dvc\n', version='1.1.1', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imFileEvent_Dev-0228FilePathHashesNovember2021(ASIMVersion).yaml]" time="0.003"><failure message="AssertionError: [{'end': 747, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, ta...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 747, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, ta...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 747, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, ta...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1270227d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November 2021 (ASIM Version)', descript...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imFileEvent_Dev-0228FilePathHashesNovember2021(ASIMVersion).yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 747, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, ta..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 747, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, ta..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 747, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, ta..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1270227d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November ...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='29a29e5d-354e-4f5e-8321-8b39d25047bf', name='Dev-0228 File Path Hashes November 2021 (ASIM Version)', descript...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_AdFind_Usage.yaml]" time="0.003"><failure message="AssertionError: [{'end': 290, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 290, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 290, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (N...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a6b10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (N...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (Normalized Process Events)', de...name': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_AdFind_Usage.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 290, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 290, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 290, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (N...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a6b10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (N...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='45076281-35ae-45e0-b443-c32aa0baf965', name='Probable AdFind Recon Tool Usage (Normalized Process Events)', de...name': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_malware_in_recyclebin.yaml]" time="0.002"><failure message="AssertionError: [{'end': 140, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 140, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 140, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normali...StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a5110&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normali...StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None)&gt; = KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normalized Process Events)', descript... StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_malware_in_recyclebin.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 140, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 140, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 140, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normali...StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246a5110&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normali...StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None)&gt; = KQL(id='61988db3-0565-49b5-b8e3-747195baac6e', name='Malware in the recycle bin (Normalized Process Events)', descript... StartTimeUtc, AccountCustomEntity = User, HostCustomEntity = Dvc\n', version='1.2.2', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/SdeletedeployedviaGPOandrunrecursively(ASIMVersion).yaml]" time="0.002"><failure message="AssertionError: [{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run re...on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246aa750&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run re...on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None)&gt; = KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run recursively (ASIM Version)', des... on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/SdeletedeployedviaGPOandrunrecursively(ASIMVersion).yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run re...on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246aa750&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run re...on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None)&gt; = KQL(id='30c8b802-ace1-4408-bc29-4c5c5afb49e1', name='Sdelete deployed via GPO and run recursively (ASIM Version)', des... on $left.ActingProcessId == $right.ParentProcessId, timekey, Dvc\n', version='1.0.2', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/Potentialre-namedsdeleteusage(ASIMVersion).yaml]" time="0.001"><failure message="AssertionError: [{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (A...ss !endswith &quot;sdelete.exe&quot;\n  | where CommandLine !has &quot;sdelete&quot;\n', version='1.0.3', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fecbd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (A...ss !endswith &quot;sdelete.exe&quot;\n  | where CommandLine !has &quot;sdelete&quot;\n', version='1.0.3', kind='Scheduled', metadata=None)&gt; = KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (ASIM Version)', description=&quot;'T...ess !endswith &quot;sdelete.exe&quot;\n  | where CommandLine !has &quot;sdelete&quot;\n', version='1.0.3', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/Potentialre-namedsdeleteusage(ASIMVersion).yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (A...ss !endswith "sdelete.exe"\n  | where CommandLine !has "sdelete"\n', version='1.0.3', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fecbd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (A...ss !endswith "sdelete.exe"\n  | where CommandLine !has "sdelete"\n', version='1.0.3', kind='Scheduled', metadata=None)&gt; = KQL(id='5b6ae038-f66e-4f74-9315-df52fd492be4', name='Potential re-named sdelete usage (ASIM Version)', description="'T...ess !endswith "sdelete.exe"\n  | where CommandLine !has "sdelete"\n', version='1.0.3', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies(ASIMVersion).yaml]" time="0.002"><failure message="AssertionError: [{'end': 35, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variabl...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 35, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variabl...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 35, 'issue': 'imProcess', 'message': &quot;The name 'imProcess' does not refer to any known table, tabular variabl...e': &quot;The name 'imProcess' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246abb10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain or Default Domain Controller ...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/NewEXEdeployedviaDefaultDomainorDefaultDomainControllerPolicies(ASIMVersion).yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 35, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variabl...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 35, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variabl...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 35, 'issue': 'imProcess', 'message': "The name 'imProcess' does not refer to any known table, tabular variabl...e': "The name 'imProcess' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246abb10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='0dd2a343-4bf9-4c93-a547-adf3658ddaec', name='New EXE deployed via Default Domain or Default Domain Controller ...{'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_MidnightBlizzard_SuspiciousRundll32Exec.yaml]" time="0.002"><failure message="AssertionError: [{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 15, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rund...imeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n&quot;, version='1.1.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701b210&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rund...imeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n&quot;, version='1.1.2', kind='Scheduled', metadata=None)&gt; = KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rundll32.exe execution of vbscript...TimeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n&quot;, version='1.1.2', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_MidnightBlizzard_SuspiciousRundll32Exec.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 15, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rund...imeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n", version='1.1.2', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701b210&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rund...imeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n", version='1.1.2', kind='Scheduled', metadata=None)&gt; = KQL(id='bdf04f58-242b-4729-b376-577c4bdf5d3a', name='Midnight Blizzard - suspicious rundll32.exe execution of vbscript...TimeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = User\n", version='1.1.2', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_SolarWinds_SUNBURST_Process-IOCs.yaml]" time="0.002"><failure message="AssertionError: [{'end': 429, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 429, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 429, 'issue': 'imProcessCreate', 'message': &quot;The name 'imProcessCreate' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds chil...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed7790&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds chil...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds child processes (Normalized Proces...name': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimProcess/imProcess_SolarWinds_SUNBURST_Process-IOCs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 429, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 429, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 429, 'issue': 'imProcessCreate', 'message': "The name 'imProcessCreate' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds chil...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ed7790&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds chil...ame': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='631d02df-ab51-46c1-8d72-32d0cfec0720', name='SUNBURST suspicious SolarWinds child processes (Normalized Proces...name': 'Yuval Naor'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/DetectPIMAlertDisablingActivity.yaml]" time="0.003"><failure message="AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 9, 'issue': 'AuditLogs', 'message': &quot;The name 'AuditLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity...: {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127007750&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity...: {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity', description=&quot;'Privileged Id...': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/DetectPIMAlertDisablingActivity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 9, 'issue': 'AuditLogs', 'message': "The name 'AuditLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity...: {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127007750&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity...: {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='1f3b4dfd-21ff-4ed3-8e27-afc219e05c50', name='Detect PIM Alert Disabling activity', description="'Privileged Id...': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/MDE_hitsforADFandAzureSynapsePipelines.yaml]" time="0.003"><failure message="AssertionError: [{'end': 187, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 187, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 187, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MD...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12591d250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MD...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MDE) signatures for Azure Synaps...name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/MDE_hitsforADFandAzureSynapsePipelines.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 187, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 187, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 187, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MD...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12591d250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MD...ame': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}})&gt; = KQL(id='a333d8bf-22a3-4c55-a1e9-5f0a135c0253', name='Microsoft Defender for Endpoint (MDE) signatures for Azure Synaps...name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVTarrask.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVTarrask.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Dev-0530AVHits.yaml]" time="0.002"><failure message="AssertionError: [{'end': 135, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...': &quot;The name 'DeviceInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 135, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...': &quot;The name 'DeviceInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 135, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabula...': &quot;The name 'DeviceInfo' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 a...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701ff10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 a...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 actors', description=&quot;'This que... 'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Dev-0530AVHits.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 135, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...': "The name 'DeviceInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 135, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...': "The name 'DeviceInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 135, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabula...': "The name 'DeviceInfo' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 a...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701ff10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 a...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='5f171045-88ab-4634-baae-a7b6509f483b', name='AV detections related to Dev-0530 actors', description="'This que... 'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CorrelateIPC_Unfamiliar-Atypical.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CorrelateIPC_Unfamiliar-Atypical.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AquaBlizzardAVHits.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AquaBlizzardAVHits.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVSpringShell.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVSpringShell.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/EuropiumAVHits.yaml]" time="0.002"><failure message="AssertionError: [{'end': 183, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 183, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 183, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular vari...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium a...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc9fd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium a...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium actors', description=&quot;'This que...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/EuropiumAVHits.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 183, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 183, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 183, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular vari..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium a...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc9fd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium a...': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='186970ee-5001-41c1-8c73-3178f75ce96a', name='AV detections related to Europium actors', description="'This que...e': 'Ajeet Prakash'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CoreBackupDeletionwithSecurityAlert.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/CoreBackupDeletionwithSecurityAlert.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Suspicious_WorkSpaceDeletion_Attempt.yaml]" time="0.003"><failure message="AssertionError: [{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 3 == 0&#10; +  where 3 = len([{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 13, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular...&quot;The name 'AzureActivity' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an...'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246b7710&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an...'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an infected device', description... 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Suspicious_WorkSpaceDeletion_Attempt.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 3 == 0
E            +  where 3 = len([{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 13, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular..."The name 'AzureActivity' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an...'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x1246b7710&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an...'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}})&gt; = KQL(id='a5b3429d-f1da-42b9-883c-327ecb7b91ff', name='Workspace deletion activity from an infected device', description... 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Protection', 'Platform']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Massdownload_USBFileCopy.yaml]" time="0.012"><failure message="AssertionError: [{'end': 26, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 4 == 0&#10; +  where 4 = len([{'end': 26, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 26, 'issue': 'SecurityAlert', 'message': &quot;The name 'SecurityAlert' does not refer to any known table, tabular... &quot;The name 'DeviceEvents' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device ...'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fe6e50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device ...'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device by single user', description=&quot;...y'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Massdownload_USBFileCopy.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 26, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 4 == 0
E            +  where 4 = len([{'end': 26, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 26, 'issue': 'SecurityAlert', 'message': "The name 'SecurityAlert' does not refer to any known table, tabular... "The name 'DeviceEvents' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device ...'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fe6e50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device ...'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='6267ce44-1e9d-471b-9f1e-ae76a6b7aa84', name='Mass Download &amp; copy to USB device by single user', description="...y'}, 'author': {'name': 'Jessen'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVdetectionsrelatedtoUkrainebasedthreats.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/AVdetectionsrelatedtoUkrainebasedthreats.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/HiveRansomwareAVHits.yaml]" time="0.002"><failure message="AssertionError: [{'end': 82, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 82, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 82, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ranso...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc9d50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ranso...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ransomware', description=&quot;'This que... 'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/HiveRansomwareAVHits.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 82, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 82, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 82, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ranso...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc9d50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ranso...'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='4e5914a4-2ccd-429d-a845-fa597f0bd8c5', name='AV detections related to Hive Ransomware', description="'This que... 'author': {'name': 'aprakash13'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Solorigate-Defender-Detections.yaml]" time="0.002"><failure message="AssertionError: [{'end': 10, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 10, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 10, 'issue': 'DeviceInfo', 'message': &quot;The name 'DeviceInfo' does not refer to any known table, tabular varia...&quot;The name 'SecurityAlert' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', de...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12463e3d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', de...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', description=&quot;'Surfaces any Defen...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/SecurityAlert/Solorigate-Defender-Detections.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 10, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 10, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 10, 'issue': 'DeviceInfo', 'message': "The name 'DeviceInfo' does not refer to any known table, tabular varia..."The name 'SecurityAlert' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', de...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12463e3d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', de...ame': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}})&gt; = KQL(id='e70fa6e0-796a-4e85-9420-98b17b0bb749', name='Solorigate Defender Detections', description="'Surfaces any Defen...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - 0-day Vulnerability']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthSigninsMultipleCountries.yaml]" time="0.002"><failure message="AssertionError: [{'end': 60, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 60, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 60, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries...uthor': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127046f50&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries...uthor': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries within 3 hours (Uses Authenti...author': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthSigninsMultipleCountries.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 60, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 60, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 60, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries...uthor': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127046f50&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries...uthor': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='09ec8fa2-b25f-4696-bfae-05a7b85d7b9e', name='User login from different countries within 3 hours (Uses Authenti...author': {'name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthBruteForce.yaml]" time="0.002"><failure message="AssertionError: [{'end': 161, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 161, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 161, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user cre...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704d050&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user cre...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user credentials (Uses Authentication ...name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthBruteForce.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 161, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 161, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 161, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user cre...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704d050&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user cre...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='a6c435a2-b1a0-466d-b730-9f8af69262e8', name='Brute force attack against user credentials (Uses Authentication ...name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthPasswordSpray.yaml]" time="0.002"><failure message="AssertionError: [{'end': 43, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 43, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 43, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Us...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee3290&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Us...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Uses Authentication Normalizatio...name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imAuthPasswordSpray.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 43, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 43, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 43, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Us...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ee3290&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Us...ame': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='6a2e2ff4-5568-475e-bef2-b95f12b9367b', name='Potential Password Spray Attack (Uses Authentication Normalizatio...name': 'Ofer Shezaf'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imSigninAttemptsByIPviaDisabledAccounts.yaml]" time="0.002"><failure message="AssertionError: [{'end': 16, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 16, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 16, 'issue': 'imAuthentication', 'message': &quot;The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign...Time, IPCustomEntity = SrcDvcIpAddr\n&quot;, version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704f410&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign...Time, IPCustomEntity = SrcDvcIpAddr\n&quot;, version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}})&gt; = KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign-ins to disabled accounts (Use...tTime, IPCustomEntity = SrcDvcIpAddr\n&quot;, version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ASimAuthentication/imSigninAttemptsByIPviaDisabledAccounts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 16, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 16, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 16, 'issue': 'imAuthentication', 'message': "The name 'imAuthentication' does not refer to any known table, t...e name 'imAuthentication' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign...Time, IPCustomEntity = SrcDvcIpAddr\n", version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704f410&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign...Time, IPCustomEntity = SrcDvcIpAddr\n", version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}})&gt; = KQL(id='95002681-4ecb-4da3-9ece-26d7e5feaa33', name='Sign-ins from IPs that attempt sign-ins to disabled accounts (Use...tTime, IPCustomEntity = SrcDvcIpAddr\n", version='1.0.2', kind='Scheduled', metadata={'source': {'kind': 'Community'}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/PulseConnectSecure/PulseConnectSecureVPN-CVE_2021_22893_Exploit.yaml]" time="0.002"><failure message="AssertionError: [{'end': 37, 'issue': 'PulseConnectSecure', 'message': &quot;The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 37, 'issue': 'PulseConnectSecure', 'message': &quot;The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 37, 'issue': 'PulseConnectSecure', 'message': &quot;The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893...me': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704e0d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893...me': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893 Possible Pulse Connect Secure...ame': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/PulseConnectSecure/PulseConnectSecureVPN-CVE_2021_22893_Exploit.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 37, 'issue': 'PulseConnectSecure', 'message': "The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 37, 'issue': 'PulseConnectSecure', 'message': "The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 37, 'issue': 'PulseConnectSecure', 'message': "The name 'PulseConnectSecure' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893...me': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704e0d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893...me': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}})&gt; = KQL(id='d0c82b7f-40b2-4180-a4d6-7aa0541b7599', name='PulseConnectSecure - CVE-2021-22893 Possible Pulse Connect Secure...ame': 'Sittikorn S'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Threat Intelligence']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/MaliciousWAFSessions.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/MaliciousWAFSessions.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/AzureWAFmatching_log4j_vuln.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/AzureWAFmatching_log4j_vuln.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/TimeSeriesKeyvaultAccessAnomaly.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/TimeSeriesKeyvaultAccessAnomaly.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/NRT_KeyVaultSensitiveOperations.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/NRT_KeyVaultSensitiveOperations.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyvaultMassSecretRetrieval.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyvaultMassSecretRetrieval.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyVaultSensitiveOperations.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/AzureDiagnostics/KeyVaultSensitiveOperations.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DuoSecurity/IPEntity_DuoSecurity.yaml]" time="0.000"><failure message="UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value">detections = '../d3vzer0/sentinel-cicd/Detections/DuoSecurity/IPEntity_DuoSecurity.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
&gt;           workspace = Workspace(functions=None, tables=None)
E           UnboundLocalError: cannot access local variable 'kql_content' where it is not associated with a value

prevalidate/sentinel/test_stages/test_sentinel.py:26: UnboundLocalError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/DuoSecurity/TrustMonitorEvent.yaml]" time="0.002"><failure message="AssertionError: [{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': &quot;The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': &quot;The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': &quot;The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description=&quot;...uthor': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127046cd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description=&quot;...uthor': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description=&quot;'This query identifies when a ...author': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/DuoSecurity/TrustMonitorEvent.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': "The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': "The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 51, 'issue': 'DuoSecurityTrustMonitor_CL', 'message': "The name 'DuoSecurityTrustMonitor_CL' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description="...uthor': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x127046cd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description="...uthor': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='8dcf7238-a7d0-4cfd-8d0c-b230e3cd9182', name='Trust Monitor Event', description="'This query identifies when a ...author': {'name': 'SecurityJedi'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/BehaviorAnalytics/SuspiciousSigninByAADConnectAccount.yaml]" time="0.002"><failure message="AssertionError: [{'end': 17, 'issue': 'BehaviorAnalytics', 'message': &quot;The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 17, 'issue': 'BehaviorAnalytics', 'message': &quot;The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 17, 'issue': 'BehaviorAnalytics', 'message': &quot;The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect S...cipalName, &quot;@&quot;)[0], UPNSuffix = split(UserPrincipalName, &quot;@&quot;)[1]\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e74bd0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect S...cipalName, &quot;@&quot;)[0], UPNSuffix = split(UserPrincipalName, &quot;@&quot;)[1]\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect Sync Account', description=&quot;'Th...ncipalName, &quot;@&quot;)[0], UPNSuffix = split(UserPrincipalName, &quot;@&quot;)[1]\n', version='1.0.0', kind='Scheduled', metadata=None).validate">detections = '../d3vzer0/sentinel-cicd/Detections/BehaviorAnalytics/SuspiciousSigninByAADConnectAccount.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 17, 'issue': 'BehaviorAnalytics', 'message': "The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 17, 'issue': 'BehaviorAnalytics', 'message': "The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 17, 'issue': 'BehaviorAnalytics', 'message': "The name 'BehaviorAnalytics' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect S...cipalName, "@")[0], UPNSuffix = split(UserPrincipalName, "@")[1]\n', version='1.0.0', kind='Scheduled', metadata=None)&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125e74bd0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect S...cipalName, "@")[0], UPNSuffix = split(UserPrincipalName, "@")[1]\n', version='1.0.0', kind='Scheduled', metadata=None)&gt; = KQL(id='2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6', name='Suspicious Sign In by AAD Connect Sync Account', description="'Th...ncipalName, "@")[0], UPNSuffix = split(UserPrincipalName, "@")[1]\n', version='1.0.0', kind='Scheduled', metadata=None).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/MultiVendor-PossibleDGAContacts.yaml]" time="0.005"><failure message="AssertionError: [{'end': 900, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 900, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 900, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain gene...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12705fc10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain gene...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain generated by a DGA', description=&quot;...'}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/MultiVendor-PossibleDGAContacts.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 900, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 900, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 900, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain gene...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12705fc10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain gene...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='4acd3a04-2fad-4efc-8a4b-51476594cec4', name='Possible contact with a domain generated by a DGA', description="...'}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/TimeSeriesAnomaly-MultiVendor_NetworkTraffic.yaml]" time="0.004"><failure message="AssertionError: [{'end': 152, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 152, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 152, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for t...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701d250&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for t...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for total volume of traffic', descr...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/TimeSeriesAnomaly-MultiVendor_NetworkTraffic.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 152, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 152, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 152, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table... name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for t...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12701d250&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for t...uthor': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='06a9b845-6a95-4432-a78b-83919b28c375', name='Time series anomaly detection for total volume of traffic', descr...author': {'name': 'Ashwin Patil'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepySnailURLParameters.yaml]" time="0.003"><failure message="AssertionError: [{'end': 110, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 110, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 110, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', des...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fbf3d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', des...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', description=&quot;'This detection will...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepySnailURLParameters.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 110, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 110, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 110, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', des...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fbf3d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', des...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='baedfdf4-7cc8-45a1-81a9-065821628b83', name='RunningRAT request parameters', description="'This detection will...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveRequestSequence.yaml]" time="0.003"><failure message="AssertionError: [{'end': 43, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 43, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 43, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', ...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124673a10&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', ...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', description=&quot;'CreepyDrive uses...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveRequestSequence.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 43, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 43, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 43, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', ...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124673a10&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', ...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='eda260eb-f4a1-4379-ad98-452604da9b3e', name='CreepyDrive request URL sequence', description="'CreepyDrive uses...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveURLs.yaml]" time="0.002"><failure message="AssertionError: [{'end': 385, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 385, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 385, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description=&quot;'Cr...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124666550&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description=&quot;'Cr...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description=&quot;'CreepyDrive uses OneDrive for co...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/CreepyDriveURLs.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 385, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 385, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 385, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description="'Cr...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x124666550&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description="'Cr...hor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='b6d03b88-4d27-49a2-9c1c-29f1ad2842dc', name='CreepyDrive URLs', description="'CreepyDrive uses OneDrive for co...thor': {'name': 'Thomas McElroy'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Wazuh-Large_Number_of_Web_errors_from_an_IP.yaml]" time="0.002"><failure message="AssertionError: [{'end': 17, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 17, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 17, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors ...e': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12702d490&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors ...e': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt; = KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors from an IP', description=&quot;'Ide...me': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Wazuh-Large_Number_of_Web_errors_from_an_IP.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 17, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 17, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 17, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors ...e': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12702d490&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors ...e': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}})&gt; = KQL(id='2790795b-7dba-483e-853f-44aa0bc9c985', name='Wazuh - Large Number of Web errors from an IP', description="'Ide...me': 'Jordan Ross'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Networking']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Fortinet-NetworkBeaconPattern.yaml]" time="0.005"><failure message="AssertionError: [{'end': 351, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 351, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 351, 'issue': 'CommonSecurityLog', 'message': &quot;The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected'..., 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fe6050&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected'..., 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected', description=&quot;'Identifies pat...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/CommonSecurityLog/Fortinet-NetworkBeaconPattern.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 351, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 351, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 351, 'issue': 'CommonSecurityLog', 'message': "The name 'CommonSecurityLog' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected'..., 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fe6050&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected'..., 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}})&gt; = KQL(id='3255ec41-6bd6-4f35-84b1-c032b18bbfcb', name='Fortinet - Beacon pattern detected', description="'Identifies pat...}, 'author': {'name': 'robMSFT'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Network']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/SupiciousLinkSharing.yaml]" time="0.002"><failure message="AssertionError: [{'end': 27, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 27, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 27, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fb4590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', description=&quot;'Alerts in links t... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ZoomLogs/SupiciousLinkSharing.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 27, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 27, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 27, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fb4590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', d...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='1218175f-c534-421c-8070-5dcaabf28067', name='Suspicious link sharing pattern', description="'Alerts in links t... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/E2EEDisbaled.yaml]" time="0.002"><failure message="AssertionError: [{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', desc...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704c590&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', desc...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', description=&quot;'This alerts when end... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ZoomLogs/E2EEDisbaled.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', desc...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x12704c590&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', desc...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='e4779bdc-397a-4b71-be28-59e6a1e1d16b', name='Zoom E2E Encryption Disabled', description="'This alerts when end... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/JoiningMeetingFromAnotherTimeZone.yaml]" time="0.002"><failure message="AssertionError: [{'end': 185, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 2 == 0&#10; +  where 2 = len([{'end': 185, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 185, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from susp...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc0710&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from susp...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from suspicious timezone', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ZoomLogs/JoiningMeetingFromAnotherTimeZone.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 185, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 2 == 0
E            +  where 2 = len([{'end': 185, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 185, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable...ge': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from susp...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125fc0710&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from susp...'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}})&gt; = KQL(id='58fc0170-0877-4ea8-a9ff-d805e361cfae', name='User joining Zoom meeting from suspicious timezone', description=... 'author': {'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase><testcase classname="prevalidate.sentinel.test_stages.test_sentinel" name="test_query[../d3vzer0/sentinel-cicd/Detections/ZoomLogs/ExternalUserAccess.yaml]" time="0.002"><failure message="AssertionError: [{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}]&#10;assert 1 == 0&#10; +  where 1 = len([{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}])&#10; +    where [{'end': 8, 'issue': 'ZoomLogs', 'message': &quot;The name 'ZoomLogs' does not refer to any known table, tabular variable or function.&quot;, 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', desc...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff37d0&gt;)&#10; +      where &lt;bound method KQL.validate of KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', desc...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', description=&quot;'This alerts when the...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate">detections = '../d3vzer0/sentinel-cicd/Detections/ZoomLogs/ExternalUserAccess.yaml'

    def test_query(detections):
        with open(detections, 'r') as detectionfile:
            data = safe_load(detectionfile)
            try:
                kql_content = KQL(**data)
            except ValidationError as err:
                pass
    
            workspace = Workspace(functions=None, tables=None)
            parse_failures = kql_content.validate(workspace)
&gt;           assert len(kql_content.validate(workspace)) == 0, parse_failures
E           AssertionError: [{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}]
E           assert 1 == 0
E            +  where 1 = len([{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}])
E            +    where [{'end': 8, 'issue': 'ZoomLogs', 'message': "The name 'ZoomLogs' does not refer to any known table, tabular variable or function.", 'severity': 'Error', ...}] = &lt;bound method KQL.validate of KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', desc...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt;(&lt;prevalidate.sentinel.main.Workspace object at 0x125ff37d0&gt;)
E            +      where &lt;bound method KQL.validate of KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', desc...name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}})&gt; = KQL(id='8e267e91-6bda-4b3c-bf68-9f5cbdd103a3', name='External User Access Enabled', description="'This alerts when the...'name': 'Pete Bryan'}, 'support': {'tier': 'Community'}, 'categories': {'domains': ['Security - Others', 'Identity']}}).validate

prevalidate/sentinel/test_stages/test_sentinel.py:28: AssertionError</failure></testcase></testsuite></testsuites>